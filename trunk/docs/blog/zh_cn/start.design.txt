整体设计
==============

给予对需求的分析，我们将博客系统设计四个数据库表，分别是：`User` , `Post`, `Comment` 和 `Tag` :


 * `User` 数据包括用户名和密码. 
 * `Post` 数据包括以下字段: 
	 - `title`: 必须, 文章的标题; 
	 - `content`: 必须, 文章内容，可用于Markdown格式； 
	 - `status`: 可选, 文章状态，以下状态之一： 
		 * `draft`: 草稿格式不被显示; 
		 * `published`: 被发布且显示的文章； 
		 * `archived`: 过期不被显示； 
	 - `tags`: 可选, 一组非重复的字符数组，用于分类文章 
 * `Comment` 数据包括以下字段 
	 - `name`: 必须, 作者姓名; 
	 - `email`: 必须, 作者邮件地址; 
	 - `website`: 可选, 作者网站; 
	 - `content`: 必须, 评论内容，按Markdown格式; 
	 - `status`: 必须, 评论状态，用户这个评论是否通过审核，1 或0. 
 * `Tag` 每个文章可拥有多个标签，每个标签又可以对应多个文章。标签数据库表主要用于标签云以及计算使用频率。


以下entity-relation (ER) 分析图展示了数据表之间的关联情况。注意，Post表和Tags表是多对多，我们使用中间表postTag来关联两个一对多从而实现多对多关系。

![博客数据库结构ER](schema.png)

关于上面ER图中，完整的SQL语句你可以在[博客](http://www.yiiframework.com/demos/blog/)找到。在我们Yii安装时，他们放在/wwwroot/yii/demos/blog/protected/data/schema.sqlite.sql。

接下来我们为建立博客系统设定几个里程碑:

 * 里程碑 1: 建立基本博客框架。它将包含大部分需要的功能函数。
 * 里程碑 2: 完成递交管理。它包括建立, 列表, 显示, 修改和删除文章。
 * 里程碑 3: 完成评论管理。它包括建立, 列表, 审核, 修改和删除评论。
 * 里程碑 4: 整体搭建。它包括用户菜单, 登陆, 标签云和最新评论。
 * 里程碑 5: 结尾工作。