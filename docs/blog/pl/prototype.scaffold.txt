Scaffolding
===========

Tworzenie, czytanie, aktualizowanie oraz usuwanie (CRUD, od ang. create, read, update, delete) 
są czterema podstawowymi operacjami dla (???TODO???, trwały magazyn danych) persistent storage. W naszej aplikacji blog 
głównym zadaniem jest implementacja operacji CRUD zarówno dla wiadomości jak i komentarzy. 
W części tej, będziemy używali narzędzia `yiic` w celu ukończenia tego zadania. Proces ten
znany jest również jako *scaffolding*.

Otwórz okno poleceń i wykonaj następujące polecenia:

~~~
% /wwwroot/yii/framework/yiic shell /wwwroot/blog/index.php
Yii Interactive Tool v1.0
Please type 'help' for help. Type 'exit' to quit.
>> model User
......
>> model Post
......
>> model Tag
......
>> model Comment
......
>> crud Post
......
>> crud Comment
......
>> exit
~~~

> Info|Info: Część instalacji PHP może używać różnych plików `php.ini` dla parsera PHP wiersza poleceń (CLI).
W rezultacie, podczas wykonywania powyższych poleceń `yiic`, możesz spotkać się z błędami takimi jak  
"YiiBase::include(PDO.php): failed to open stream..." czy też "...could not find driver".
Sprawdź dokładnie twoją konfigurację CLI PHP poprzez wywołanie następującego polecenia: 
>
> ~~~
> php -r "phpinfo();"
> ~~~
>
> Wynik powyższego polecenia pokaże, który plik `php.ini` jest używany i które rozszerzenia są załadowane. 
Jeśli nieprawidłowy plik `php.ini` jest w użyciu, możesz użyć następującego polecenia aby bezpośrednio 
określić poprawny plik `php.ini`, który powinien zostać użyty:
>
> ~~~
> php -c php.ini /wwwroot/yii/framework/yiic.php shell /wwwroot/blog/index.php
> ~~~

Powyzasze polecenie wykonuje dwa zadania. Pierwsze, polecenie `model` generuje plik klasy 
[model](http://www.yiiframework.com/doc/guide/basics.model) dka ja każdej z tabel bazy danych. 
Drugie, polecenie `crud` generuje kod potrzebny przez operacje CRUD dla modeli wiadomości 
`Post` i komentarza `Comment`.

Możemy przetestować wygenerowany kod poprzez użycienastępujących URLi

~~~
http://www.example.com/blog/index.php?r=post
http://www.example.com/blog/index.php?r=comment
~~~

Notice that the post and comment features implemented by the generated code are completely independent of each other. Also, when creating a new post or comment, we are required to enter information, such as `authId` and `createTime`, which in real application should be set by the program. Don't worry. We will fix these problems in the next milestones. For now, we should be fairly satisfied as this prototype already contains most features that we need to implement for the blog application.

To prepare for the next milestones, let's take a closer look at the files generated by the above commands. All the files are generated under `/wwwroot/blog/protected`. For convenience, we group them into [model](http://www.yiiframework.com/doc/guide/basics.model) files, [controller](http://www.yiiframework.com/doc/guide/basics.controller) files and [view](http://www.yiiframework.com/doc/guide/basics.view) files:

 - model files:
	 * `models/User.php` contains the `user` class that extends from [CActiveRecord] and can be used to access the `User` database table;
	 * `models/Post.php` contains the `Post` class that extends from [CActiveRecord] and can be used to access the `Post` database table;
	 * `models/Tag.php` contains the `Tag` class that extends from [CActiveRecord] and can be used to access the `Tag` database table;
	 * `models/Comment.php` contains the `Comment` class that extends from [CActiveRecord] and can be used to access the `Comment` database table;

 - controller file:
	 * `controllers/PostController.php` contains the `PostController` class which is the controller in charge of all CRUD operations about posts;
	 * `controllers/CommentController.php` contains the `CommentController` class which is the controller in charge of all CRUD operations about comments;

 - view files:
	 * `views/post/create.php` is the view file that shows an HTML form to create a new post;
	 * `views/post/update.php` is the view file that shows an HTML form to update an existing post;
	 * `views/post/show.php` is the view file that displays the detailed information of a post;
	 * `views/post/list.php` is the view file that displays a list of posts;
	 * `views/post/admin.php` is the view file that displays posts in a table with administrative commands.
	 * `views/post/_form.php` is the partial view file that displays the HTML form for collecting post information. It is embedded in the `create` and `update` views.
	 * a similar set of view files are also generated for comment.

In order to understand better how the above files are used, we show in the following the workflow that occurs in the blog application when displaying a list of posts:

 1. The [entry script](http://www.yiiframework.com/doc/guide/basics.entry) is executed by the Web server which creates and initializes an [application](http://www.yiiframework.com/doc/guide/basics.application) instance to handle the request;
 2. The application creates an instance of `PostController` and executes it;
 3. The `PostController` instance executes the requested `list` action by calling its `actionList()` method;
 4. The `actionList()` method queries database to bring back the list of recent posts;
 5. The `actionList()` method renders the `list` view with the post data.


<div class="revision">$Id: prototype.scaffold.txt 683 2009-02-16 05:20:17Z qiang.xue $</div>