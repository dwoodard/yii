Scaffolding with Posts
======================

Post management is one of the main requirements for the blog application. It includes creating, reading, updating and deleting (CRUD) posts. In this section, we will use the `yiic` tool to create rapidly a prototype about post management. This process is also known as *scaffolding*.

Open a command window and run the following commands:

~~~
% cd /wwwroot/blog

% protected/yiic shell
Yii Interactive Tool v1.0
Please type 'help' for help. Type 'exit' to quit.
>> model Post
......
>> model Tag
......
>> model Comment
......
>> crud Post
......
>> exit

%
~~~

The files generated by the above commands are located under `/wwwroot/blog/protected` and can be classified into [model](http://www.yiiframework.com/doc/guide/basics.model), [controller](http://www.yiiframework.com/doc/guide/basics.controller) and [view](http://www.yiiframework.com/doc/guide/basics.view) files:

 - model files:
	 * `models/Post.php` contains the `Post` class that extends from [CActiveRecord] and can be used to access the `Post` database table;
	 * `models/Tag.php` contains the `Tag` class that extends from [CActiveRecord] and can be used to access the `Tag` database table;
	 * `models/Comment.php` contains the `Comment` class that extends from [CActiveRecord] and can be used to access the `Comment` database table;

 - controller file:
	 * `controllers/PostController.php` contains the `PostController` class which is the controller in charge of all CRUD operations about posts;

 - view files:
	 * `views/post/create.php` is the view file that shows an HTML form to create a new post;
	 * `views/post/update.php` is the view file that shows an HTML form to update an existing post;
	 * `views/post/show.php` is the view file that displays the detailed information of a post;
	 * `views/post/list.php` is the view file that displays a list of posts;
	 * `views/post/admin.php` is the view file that displays posts in a table with administrative commands.
	 * `views/post/_form.php` is the partial view file that displays the HTML form for collecting post information. It is embedded in the `create` and `update` views.


When a user requests to display the latest posts, the following steps occurs to the blog application:

 1. The [entry script](http://www.yiiframework.com/doc/guide/basics.entry) is executed by the Web server which creates and initializes an [application](http://www.yiiframework.com/doc/guide/basics.application) instance to handle the request;
 2. The application creates an instance of `PostController` and executes it;
 3. The `PostController` instance executes the requested `list` action by calling its `actionList()` method;
 4. The `actionList()` method queries database to bring back the list of recent posts;
 5. The `actionList()` method renders the `list` view with the post data.

To try out the post management feature that we just prototyped, access the URL `http://www.example.com/blog/index.php?r=post`. The feature seems to be fairly complete as it contains all the needed operations as described in the requirements.

Note that we cannot access the `admin` page in the prototype because the page is configured to be accessible only by a user named `admin`. In the next section, we will describe how to remove this constraint. We will also fine tune the generated pages to fulfill the requirements precisely.

<div class="revision">$Id$</div>