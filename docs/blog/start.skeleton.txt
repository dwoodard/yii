Creating Skeleton Application
=============================

To begin with, we create a skeleton application that will serve as a good starting point for our blog application.

The blog application will be created under the folder `/wwwroot/blog`, where `/wwwroot` stands for the document root of our Web server. As a result, our blog application can be accessed via URL `http://www.example.com/blog/` (you should replace `www.example.com` with the actual host name of your server).


Installing Yii
--------------

We first need to install the Yii framework. Grab a copy of the Yii release file (version 1.0.3 or above) from [www.yiiframework.com](http://www.yiiframework.com/download) and unpack it to the directory `/wwwroot/yii`. After the installation, double check to make sure that there is a directory `/wwwroot/yii/framework`.

> Tip: The Yii framework can be installed anywhere in the file system. Its `framework` directory contains all framework code and is the only directory needed when deploying an Yii application. A single installation of Yii can be used by multiple Yii applications.

Because our blog application needs to access SQLite database via [PDO](http://www.php.net/manual/en/book.pdo.php), it is required that we enable both the `pdo` and `pdo_sqlite` PHP extensions for our PHP installation. We may run the requirement checker to verify we have these extensions enabled. The requirement checker is a script that can be accessed via URL `http://www.example.com/yii/requirements/index.php`.


Creating Application
--------------------

We perform the following steps to create a skeleton application:

 1. Copy the `testdrive` directory from the Yii installation to `/wwwroot/blog`;
 2. Edit the file `/wwwroot/blog/index.php` by setting the `$yii` variable to be `/wwwroot/yii/framework/yii.php`;
 3. Edit the file `/wwwroot/blog/protected/yiic.php` by setting the `$yiic` variable to be `/wwwroot/yii/framework/yiic.php`.
 4. Change the permission of the directories `/wwwroot/blog/assets` and `/wwwroot/blog/protected/runtime` to make them writable by the Web server process.
 5. If on Linux or Unix, change the permission of `/wwwroot/blog/protected/yiic` to be executable.

That's it. To try out the application we just created, open a Web browser and navigate to the URL `http://www.example.com/blog/index.php`. We shall see that our application has three fully functional pages: the homepage, the contact page and the login page.

In the following, we briefly describe what we have in this skeleton application.

###Entry Script

We have an [entry script](http://www.yiiframework.com/doc/guide/basics.entry) file `/wwwroot/blog/index.php` which has the following content:

~~~
[php]
<?php
$yii='/wwwroot/framework/yii.php';
$config=dirname(__FILE__).'/protected/config/main.php';

// remove the following line when in production mode
defined('YII_DEBUG') or define('YII_DEBUG',true);

require_once($yii);
Yii::createWebApplication($config)->run();
~~~

This is the only script that Web users can directly access. The script first includes the Yii bootstrap file `yii.php`. It then creates an [application](http://www.yiiframework.com/doc/guide/basics.application) instance with the specified configuration and executes the application.


###Base Application Directory

We also have an [application base directory](http://www.yiiframework.com/doc/guide/basics.application#application-base-directory) `/wwwroot/blog/protected`. The majority of our code and data will be placed under this directory, and it should be protected from being accessed by Web users. For [Apache httpd Web server](http://httpd.apache.org/), we place under this directory a `.htaccess` file with the following content:

~~~
deny from all
~~~

For other Web servers, please refer to the corresponding manual on how to protect a directory from being accessed by Web users.


Application Workflow
--------------------

To help understand how Yii works, we describe the main workflow in our skeleton application when a user is accessing its contact page:

 1. The [entry script](http://www.yiiframework.com/doc/guide/basics.entry) is executed by the Web server to process the request;
 2. An [application](http://www.yiiframework.com/doc/guide/basics.application) instance is created and configured with initial property values specified in the application configuration file `/wwwroot/blog/protected/config/main.php`;
 3. The application resolves the request into a [controller](http://www.yiiframework.com/doc/guide/basics.controller) and a [controller action](http://www.yiiframework.com/doc/guide/basics.controller#action). For the contact page request, it is resolved as the `site` controller and the `contact` action;
 4. The application creates the `site` controller in terms of a `SiteController` instance and then executes it;
 5. The `SiteController` instance executes the `contact` action by calling its `actionContact()` method;
 6. The `actionContact` method renders a [view](http://www.yiiframework.com/doc/guide/basics.view) named `contact` to the Web user. Internally, this is achieved by including the view file `/wwwroot/blog/protected/views/site/contact.php` and embedding the result into the [layout](http://www.yiiframework.com/doc/guide/basics.view#layout) file `/wwwroot/blog/protected/views/layouts/main.php`.


<div class="revision">$Id$</div>