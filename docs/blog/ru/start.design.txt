Общая структура
==============

Основываясь на анализе требований, мы установили, что наше приложение блога
требует наличия четырех таблиц БД для хранения данных: `User`, `Post`,
`Comment` и `Tag`:

 * `User` хранит пользовательскую информацию, включая имя пользователя
(username) и пароль;
 * `Post` хранит информацию о постах. Главным образом, содержит следующие
колонки:
	 - `title`: необходимо, заголовок поста;
	 - `content`: необходимо, содержимое поста, использующее
[формат Markdown](http://daringfireball.net/projects/markdown/syntax);
	 - `status`: необходимо, статус поста, может принимать значения:
		 * `draft`: пост находится в черновом варианте и невидим для публики;
		 * `published`: пост опубликован;
		 * `archived`: пост с истекшим сроком действия, архивный, невидим
публике.
	 - `tags`: опционально, список разделенных запятой слов, относящих пост к
той или иной категории;
 * `Comment` хранит информацию о комментариях постов. Каждый комментарий
ассоциируется с некоторым постом и, главным образом, содержит следующие
колонки:
	 - `name`: необходимо, имя автора;
	 - `email`: необходимо, email автора;
	 - `website`: опционально, URL-адрес веб-сайта автора;
	 - `content`: необходимо, содержимое комментария, использующее
[формат Markdown](http://daringfireball.net/projects/markdown/syntax);
	 - `status`: необходимо, статус комментария, показывающий, утвержден ли
комментарий (значение 1) или нет (значение 0);
 * `Tag` хранит информацию о тегах постов. Каждый пост может иметь несколько
постов, а каждый тег может быть присвоен нескольким постам. Таблица `Tag`,
галвным образом, используется портлетом "облако тегов", которому нужно
посчитать частоту использования каждого тега.

Следующая диаграмма сущность-отношение (ER) показывает структуру таблиц и
отношений между ними. Обратите внимание, что отношение между сущностями `Post`
и `Tag` - многие-ко-многим. Мы используем таблицу `PostTag` для разъединения
данного отношения в два отношения один-ко-многим.

![Диаграмма сущность-отношение БД системы управления блогом](schema.png)

Законченные выражения SQL, соответствующие ER-диаграмме выше, вы можете найти в
[демо-блоге](http://www.yiiframework.com/demos/blog/). В нашей установленной
копии, они находятся в файле
`/wwwroot/yii/demos/blog/protected/data/schema.sqlite.sql`.


Мы разделили разработку нашего приложения на несколько основных точек:

 * Точка 1: создание прототипа системы управления блогом. Он должен содержать
большую часть требуемой функциональности;
 * Точка 2: завершение управления постами. Включает создание, удаление, показ
списком постов, показ отдельного поста;
 * Точка 3: завершение управления комментариями. Включает создание, обновление,
удаление, показ списком и утверждение комментариев к постам;
 * Точка 4: реализация портлетов. Включает портлеты меню пользователя, формы
входа, облака тегов и недавних комментариев;
 * Точка 5: финальная оптимизация и развертывание.

<div class="revision">$Id: start.design.txt 685 2009-02-17 01:45:48Z qiang.xue $</div>