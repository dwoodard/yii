Генерация каркаса
=================

Create, read, update и delete (CRUD) — четыре основных операции, при помощи
которых можно управлять объектами данных. Так как реализация CRUD является
типичной задачей для любого веб-приложения, для автоматизации можно воспользоваться
специальным инструментом Yii (также известным как *скаффолдинг*). В этом разделе
мы опишем, как использовать данный инструмент для реализации CRUD записей и
комментариев.

Откроем командную строку и выполним следующие команды:
~~~
% /wwwroot/yii/framework/yiic shell /wwwroot/blog/index.php
Yii Interactive Tool v1.1
Please type 'help' for help. Type 'exit' to quit.
>> model *
…
>> crud Post
…
>> crud Comment
…
>> exit
~~~

> Info|Информация: Некоторые установленные копии PHP могут использовать другой
> файл `php.ini` для PHP анализатора командной строки (CLI). В результате
> выполнения команд выше, Вы можете столкнуться с такими ошибками
> как «YiiBase::include(PDO.php): failed to open stream…» или «…could
> not find driver». Дважды проверьте свою конфигурацию PHP CLI,
> выполнив следующую команду:
>
> ~~~
> php -i
> ~~~
>
> Результат команды покажет, какой файл `php.ini` используется и какие
> расширения загружены. Если используется неправильный файл `php.ini`,
> можно использовать следующую команду, чтобы явно задать нужный
> файл `php.ini`:
>
> ~~~
> php -c php.ini /wwwroot/yii/framework/yiic.php shell /wwwroot/blog/index.php
> ~~~

Команды выше выполняют две задачи. Команда `model` генерируют файл
класса [модели](/doc/guide/ru/basics.model) для каждой таблицы базы данных `blog`.
Команды `CRUD` генерируют код, необходимый операциям CRUD для
моделей `Post` и `Comment`.

> Tip|Подсказка: Команда `model *` генерирует классы моделей для *каждой* таблицы
в базе данных. В некоторых случаях это не нужно (например, если в БД содержатся
не относящиеся к приложению таблицы). В этом случае мы можем сгенерировать классы
моделей по одному. К примеру, для того, чтобы создать модель `User`, мы можем
использовать команду `model User`. Команда `model` имеет некоторые дополнительные
параметры. Информацию о них можно получить командой `help model`.

Мы можем проверить сгенерированный код, перейдя по следующим URL:

~~~
http://www.example.com/blog/index.php?r=post
http://www.example.com/blog/index.php?r=comment
~~~

Заметим, что возможности записей и комментариев, реализованные в сгенерированном
коде, полностью независимы друг от друга. При создании новой записи или
комментария, мы обязаны вводить информацию, такую как `author_id` и `create_time`,
которая в реальном приложении должна устанавливаться программой.
Мы устраним эти проблемы на следующих этапах. На данном этапе прототип уже содержит
большинство возможностей, которые мы должны реализовать в нашем приложении.

Чтобы подготовиться к следующим этапам, давайте поближе познакомимся с
содержимым сгенерированных файлов. Все сгенерированые файлы расположены в директории
`/wwwroot/blog/protected`. Для удобства мы разделяем их на
[модели](/doc/guide/ru/basics.model), [контроллеры](/doc/guide/ru/basics.controller)
и [представления](/doc/guide/ru/basics.view):

 - файлы моделей:
  * `models/User.php` содержит класс `User`, который наследуется от
  [CActiveRecord] и может использоваться для обращения к таблице `tbl_user`;
  * `models/Post.php` содержит класс `Post`, который наследуется от
  [CActiveRecord] и может использоваться для обращения к таблице `tbl_post`;
  * `models/Tag.php` содержит класс `Tag`, который наследуется от
  [CActiveRecord] и может использоваться для обращения к таблице `tbl_tag`;
  * `models/Comment.php` содержит класс `Comment`, который наследуется от
  [CActiveRecord] и может использоваться для обращения к таблице `tbl_comment`;
  * `models/Lookup.php` содержит класс `Lookup`, который наследуется от
  [CActiveRecord] и может использоваться для обращения к таблице `tbl_lookup`;

 - файлы контроллеров:
  * `Controllers/PostController.php` содержит класс `PostController`, который
  является контроллером, отвечающим за все операции CRUD для записей;
  * `Controllers/CommentController.php` содержит класс `CommentController`,
  который является контроллером, отвечающим за все операции CRUD для комментариев;

 - файлы представлений:
  * `views/post/create.php` — файл представления, который показывает HTML-форму
     для создания записи;
  * `views/post/update.php` — файл представления, который показывает HTML-форму
     для обновления записи;
  * `views/post/view.php` — файл представления, который отображает подробную
     информацию записи;
  * `views/post/index.php` — файл представления, который отображает список записей;
  * `views/post/admin.php`— файл представления, который отображает записи в
     таблице с административными командами.
  * `views/post/_form.php` — частичный файл представления, используемый в
    `views/post/create.php` и `views/post/update.php`. Он отображает
     HTML-форму для сбора информации о записи.
  * `views/post/_view.php` — частичный файл представления, используемый в
    `views/post/index.php`. Он отображает краткий вид отдельной записи.
  * `views/post/_search.php`— файл представления, используемый в `views/post/admin.php`.
     Используется для формы поиска.
  * Подобный набор файлов представлений также сгенерирован для комментариев.

Чтобы лучше понять, как используются файлы выше, рассмотрим, что происходит
при отображении списка записей:

 0. Пользователь запрашивает URL `http://www.example.com/blog/index.php?r=posts`;
 1. [Входной скрипт](basics.entry) выполняется Web-сервером и инициализирует экземпляр
    [приложения](basics.application) для обработки запроса;
 2. Приложение создает экземпляр класса `PostController` и выполняет его;
 3. Экземпляр класса `PostController` выполняет действие `index` (метод `actionIndex()`).
    Отметим, что `index` является действием по умолчанию и используется в случае,
    если пользователь не указал действие в URL;
 4. Метод `actionIndex()` делает запрос к базе данных для получения списка последних записей;
 5. Метод `actionIndex()` генерирует представление `index` с данными записей.


<div class="revision">$Id: prototype.scaffold.txt 1872 2010-03-10 15:21:55Z qiang.xue $</div>