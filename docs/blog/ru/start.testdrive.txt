Знакомимся с Yii
====================

В данном разделе мы опишем создание основы приложения, которая будет служить
нашей отправной точкой. Для простоты, примем, что `document root` нашего
веб-сервера - это `/wwwroot` и соответствующий URL-адрес -
`http://www.example.com/`.


Установка Yii
--------------

Сначала мы установим фрейморк Yii. Скачаем копию архива релиза Yii (версии
1.0.3 или выше) с сайта
[www.yiiframework.com](http://www.yiiframework.com/download) и распакуем в
директорию `/wwwroot/yii`. Убедимся, что получили директорию
`/wwwroot/yii/framework`.

> Tip|Подсказка: Фреймворк Yii может быть установлен в любом месте файловой
системы. Директория `framework` содержит весь код фреймворка и это единственная
необходимая директория при развертывании приложения. Одна установка Yii может
использоваться многими приложениями.

После установки Yii откроем окно браузера и перейдем по URL-адресу
`http://www.example.com/yii/requirements/index.php`. Мы увидим анализатор
требований, поставляемый в релизе Yii. Убедимся, что наши веб-сервер и
установленная версия PHP соответствуют минимальным требованиям Yii. В
частности, мы должны включить расширения PHP `pdo` и `pdo_sqlite`, которые
требуются нашему блогу для доступа к БД SQLite.


Создание основы приложения
-----------------------------

Далее, используем утилиту `yiic` для создания основы приложения в директории
`/wwwroot/blog`. Утилита `yiic` - это утилита командной строки, поставляемая в
релизе Yii. Она может быть использована для генерации кода для определенных
задач.

Откроем окно командной строки и выполним следующую команду::

~~~
% /wwwroot/yii/framework/yiic webapp /wwwroot/blog
Create a Web application under '/wwwroot/blog'? [Yes|No]y
......
~~~

> Tip|Подсказка: Чтобы использовать утилиту `yiic` как показано выше, путь к
>PHP должен быть прописан в системной переменной. Есил это не так, то мы можем
>использовать следующую команду:
>
>~~~
> путь/к/php /wwwroot/yii/framework/yiic.php webapp /wwwroot/blog
>~~~

Попробуем запустить свежесозданное приложение. Откроем браузер и перейдем по
URL-адресу `http://www.example.com/blog/index.php`. Мы должны увидеть, что наше
приложение имеет 3 полнофункциональных страницы: `Главная`, `Контакты` и `Вход`.

Ниже мы кратко опишем, что же имеем в основе приложения.

###Входной скрипт

У нас есть файл
[входного скрипта](http://www.yiiframework.com/doc/guide/ru/basics.entry) -
`/wwwroot/blog/index.php` с таким содержимым:

~~~
[php]
<?php
$yii='/wwwroot/framework/yii.php';
$config=dirname(__FILE__).'/protected/config/main.php';

// удалить следующую строку в режиме production
defined('YII_DEBUG') or define('YII_DEBUG',true);

require_once($yii);
Yii::createWebApplication($config)->run();
~~~

Это единственный скрипт, к которому пользователи имеют прямой доступ. Сначала
скрипт подключает файл начальной загрузки `yii.php`. Затем создает экземпляр
[приложения](http://www.yiiframework.com/doc/guide/ru/basics.application) с
определенными настройками и выполняет приложение.


###Базовая директория приложения

Также, у нас есть
[базовая директория приложения](http://www.yiiframework.com/doc/guide/ru/basics.application#application-base-directory)
`/wwwroot/blog/protected`. Большая часть нашего кода и данных будет храниться
в этой директории и должна быть защищена от прямого доступа веб-пользователей.
Для [веб-сервера Apache](http://httpd.apache.org/) мы помещаем в эту директорию
файл `.htaccess` со следующим содержанием:

~~~
deny from all
~~~

Пожалуйста, для настройки других веб-серверов обратитесь к соответствующей
документации, как защитить директорию от прямого доступа веб-пользователями.


Последовательность работы приложения
--------------------

Чтобы помочь понять работу Yii, мы опишем основную последовательность работы в
нашей основе приложения, когда пользователь обращается к странице `Контакты`:

 1. [Входной скрипт](http://www.yiiframework.com/doc/guide/ru/basics.entry)
выполняется веб-сервером для обработки запроса;
 2. Экземпляр
[приложения](http://www.yiiframework.com/doc/guide/ru/basics.application)
создается и конфигурируется с определенными в файле конфигурации
`/wwwroot/blog/protected/config/main.php` начальными значениями;
 3. Приложение разрешает (обрабатывает) запрос в
[контроллер](http://www.yiiframework.com/doc/guide/ru/basics.controller) и
[действие контроллера](http://www.yiiframework.com/doc/guide/ru/basics.controller#action).
Запрос страницы `Контакты` разрешается в контроллер `site` и действие `contact`;
 4. Приложение создает контроллер `site` в виде экземпляра класса
`SiteController` и выполняет его;
 5. Экземпляр класса `SiteController` выполняет действие `contact` вызовом его
метода `actionContact()`;
 6. Метод `actionContact()` генерирует (и показывает)
[представление](http://www.yiiframework.com/doc/guide/ru/basics.view) `contact`
веб-пользователю. Внутренне, это достигается подключением файла представления
`/wwwroot/blog/protected/views/site/contact.php` и включения результата в файл
[макета](http://www.yiiframework.com/doc/guide/ru/basics.view#layout)
`/wwwroot/blog/protected/views/layouts/main.php`.


<div class="revision">$Id: start.testdrive.txt 681 2009-02-16 04:57:01Z qiang.xue $</div>