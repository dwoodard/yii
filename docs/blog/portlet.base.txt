Customizing Page Layout
=======================

Features like "the most recent comments", "tag cloud" are better to be implemented in [portlets](http://en.wikipedia.org/wiki/Portlet). A portlet is a pluggable user interface component that renders a fragment of HTML code. In this section, we describe how to set up the portlet architecture for our blog application.

Before we go into details about developing portlets, we first need to adjust our page layout so that the portlets can be placed in a side bar.

A page layout determines how to share common sections (e.g. header, footer) among different pages, and how to embed contents that are specific for different pages. In Yii, a page layout is represented as a view under the `protected/views/layouts` folder. When we call the `render()` method in a controller, the rendering result will be automatically embedded into this layout view before it is displayed to end users. The default layout view is named as `main`, which means the `/wwwroot/blog/protected/views/layouts/main.php` file in our blog application.

We could directly modify the `main` layout to add a side bar. However, doing so would make some irrelevant pages, such as `about`, `contact` pages, to have a side bar, which is not always desirable. For this reason, we need different layouts for different pages.

We thus create two different layouts: `column1` and `column2`. The former displays the page in a single column, while the latter displays two columns in the page, one of which is the side bar. We will use `column2` layout for the post and comment pages, and `column1` for the rest of the pages. Because both `column1` and `column2` still share the same header and footer sections, we let them to share the `main` layout.

Based on the above description, we create the `column1` layout as follows,

~~~
[php]
<?php $this->beginContent('/layouts/main'); ?>
<div class="container">
	<div id="content">
		<?php echo $content; ?>
	</div><!-- content -->
</div>
<?php $this->endContent(); ?>
~~~

and the `column2` layout as follows,

~~~
[php]
<?php $this->beginContent('/layouts/main'); ?>
<div class="container">
	<div class="span-18">
		<div id="content">
			<?php echo $content; ?>
		</div><!-- content -->
	</div>
	<div class="span-6 last">
		<div id="sidebar">
			portlets to be placed here
		</div><!-- sidebar -->
	</div>
</div>
<?php $this->endContent(); ?>
~~~

As we can see, both `column1` and `column2` are enclosed in a pair of `beginContent` and `endContent` calls. They essentially use the specified view `/layouts/main` to decorate the enclosed content. In all these layout views, the variable `$content` refers to the dynamic content to be embedded into the layout.

Besides customizing the layout view file, we also need to adjust the CSS file `/wwwroot/blog/css/main.css` so that the overall appearance would look like what we see in the [blog demo](http://www.yiiframework.com/demos/blog/). We will not go into details here.

> Info: The skeleton application generated by the `yiic` tool uses the [BluePrint](http://www.blueprintcss.org/) CSS framework. It provides a nice font reset and a robust grid system. For more details on how to use this framework, please refer to its documentation.

After creating the new layouts, we need to set the `layout` property of controllers to make use of them. So far we have three controllers: `SiteController`, `PostController` and `CommentController`. We set `SiteController` to use `column1` as the default layout, while the rest two of the controllers use `column2`, for example,

~~~
[php]
class PostController extends Controller
{
	public $layout='column2';
	......
}
~~~

> Tip: If some view of the controller does not use the same layout as declared by the `layout` property, it may customize it in the view by a simple assignment `$this->layout='newlayout';`.

<div class="revision">$Id$</div>