建立第一个 Yii 应用
===================

为了对 Yii 有个初步认识，我们在本节讲述如何建立第一个 Yii 应用。我们将使用强大的 `yiic` 工具，它用来自动生成各种代码。假定 `YiiRoot` 为 Yii 的安装目录。

在命令行运行 `yiic`，如下所示：

~~~
% YiiRoot/framework/yiic webapp WebRoot/testdrive
~~~

> 注意：在 MacOS、Linux 或 Unix 系统中运行 `yiic` 时，你可能需要修改 `yiic` 文件的权限使它能够运行。你也可以用 `php YiiRoot/framework/yiic.php` 来代替 `yiic`。

这将在 `WebRoot/testdrive` 目录下建立一个最基本的 Yii 应用，`WebRoot` 代表你的 Web 服务器根目录。这个应用具有所有必须的目录和文件，因此可以方便地在此基础上添加更多功能。

不用写一行代码，我们可以在浏览器中访问如下 URL 来看看我们第一个 Yii 应用：

~~~
http://hostname/testdrive/index.php
~~~

正如我们看到的，这个应用包含三个页面：首页、联系页、登录页。首页展示一些关于应用和用户登录状态的信息，联系页显示一个联系表单以便用户填写并提交他们的咨询，登录页允许用户先通过认证然后访问已授权的内容。
查看下列截图了解更多：

![首页](first-app1.png)

![联系页](first-app2.png)

![输入错误的联系页](first-app3.png)

![提交成功的联系页](first-app4.png)

![登录页](first-app5.png)


The following diagram shows the directory structure of our application.
Please see [Conventions](/doc/guide/basics.convention#directory) for detailed
explanation about this structure.
下面的树图描述了我们这个应用的目录结构。请查看[约定](/doc/guide/basics.convention#directory)以获取该结构的详细解释。

~~~
testdrive/
   index.php                 Web 应用入口脚本文件
   assets/                   包含公开的资源文件
   css/                      包含 CSS 文件
   images/                   包含图片文件
   themes/                   包含应用主题
   protected/                包含受保护的应用文件
      yiic                   yiic 命令行脚本
      yiic.bat               Windows 下的 yiic 命令行脚本
      commands/              包含自定义的 'yiic' 命令
         shell/              包含自定义的 'yiic shell' 命令
      components/            包含可重用的用户组件
         MainMenu.php        'MainMenu' 挂件类
         Identity.php        用来认证的 'Identity' 类
         views/              包含挂件的视图文件
            mainMenu.php     'MainMenu' 挂件的视图文件
      config/                包含配置文件
         console.php         控制台应用配置
         main.php            Web 应用配置
      controllers/           包含控制器的类文件
         SiteController.php  默认控制器的类文件
      extensions/            包含第三方扩展
      messages/              包含翻译过的消息
      models/                包含模型的类文件
         LoginForm.php       'login' 动作的表单模型
         ContactForm.php     'contact' 动作的表单模型
      runtime/               包含临时生成的文件
      views/                 包含控制器的视图和布局文件
         layouts/            包含布局视图文件
            main.php         所有视图的默认布局
         site/               包含 'site' 控制器的视图文件
            contact.php      'contact' 动作的视图
            index.php        'index' 动作的视图
            login.php        'login' 动作的视图
         system/             包含系统视图文件
~~~

连接到数据库
------------

大多数 Web 应用由数据库驱动，我们的测试应用也不例外。要使用数据库，我们首先需要告诉应用如何连接它。修改应用的配置文件 `WebRoot/testdrive/protected/config/main.php` 即可，如下所示：

~~~
[php]
return array(
	......
	'components'=>array(
		......
		'db'=>array(
			'connectionString'=>'sqlite:protected/data/source.db',
		),
	),
	......
);
~~~

在上面的代码中，我们添加了 `db` 条目至 `components` 中，指示应用在需要的时候连接到 SQLite 数据库 `WebRoot/testdrive/protected/data/source.db`。

> 注意：要使用 Yii 的数据库功能，我们需要启用 PHP 的 PDO 扩展和相应的驱动扩展。对于测试应用来说，我们需要启用 `php_pdo` 和 `php_pdo_sqlite` 扩展。

接下来，我们需要准备一个 SQLite 数据库以使上面的配置生效。使用一些 SQLite 管理工具，我们可以建立一个包含如下模式的数据库：

~~~
[sql]
CREATE TABLE User (
	id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	username VARCHAR(128) NOT NULL,
	password VARCHAR(128) NOT NULL,
	email VARCHAR(128) NOT NULL
);
~~~

简单起见，我们只在库中建立了一个 `User` 表。SQLite 数据库文件保存在 `WebRoot/testdrive/protected/data/source.db`。注意，数据库文件和包含它的目录都要求 Web 服务器进程可写。

实现 CRUD 操作
--------------

激动人心的时刻来了。我们想要为刚才建立的 `User` 表实现 CRUD (create, read, update 和 delete) 操作，这也是实际应用中最常见的操作。

我们还是用 `yiic` 工具来帮助我们生成需要的代码，这个过程通常称为“脚手架”。

~~~
% cd WebRoot/testdrive
% YiiRoot/framework/yiic shell
Yii Interactive Tool v1.0
Please type 'help' for help. Type 'exit' to quit.
>> model User
   generate User.php

The 'User' class has been successfully created in the following file:
    D:\wwwroot\testdrive\protected\models\User.php

If you have a 'db' database connection, you can test it now with:
    $model=User::model()->find();
    print_r($model);

>> crud User
   generate UserController.php
   generate create.php
      mkdir D:/wwwroot/testdrive/protected/views/user
   generate update.php
   generate list.php
   generate show.php

Crud 'user' has been successfully created. You may access it via:
http://hostname/path/to/index.php?r=user
~~~

如上所示，我们使用 `yiic` 的 `shell` 命令来和我们刚才建立的应用进行交互。在提示符后面，我们可以输入一个有效的 PHP 语句或表达式来运行并显示。我们还可以完成一些诸如 `model` 或 `crud` 之类的任务。`model` 命令自动生成一个基于 `User` 表结构的 `User` 模型类，`crud` 命令生成实现 `User` 模型 CRUD 操作的控制器类和视图。

> 注意，如果你更改了你的任何代码或配置，请重新输入 `yiic shell` 以使你的新代码或配置文件生效。还有，确保你使用了正确的 PHP CLI 来运行 `yiic`，否则你会碰到 "...could not find driver" 之类的错误（即使你确信已经启用了 PDO 和相应的驱动）。这类错误通常是因为 PHP CLI 使用了不恰当的 `php.ini`。

让我们看看成果，访问如下 URL：

~~~
http://hostname/testdrive/index.php?r=user
~~~

这会显示一个 `User` 表中记录的列表。因为我们的表是空的，现在什么都没显示。

点击页面上的 `新增用户` 链接，如果没有登录的话我们将被带到登录页。登录后，我们看到一个可供我们添加新用户的表单。完成表单并点击 `建立` 按钮，如果有任何输入错误的话，一个友好的错误提示将会显示并阻止我们保存。回到用户列表页，我们应该能看到刚才添加的用户显示在列表中。

重复上述步骤以添加更多用户。注意，如果一页显示的用户条目太多，列表页会自动分页。

如果我们使用 `admin/admin` 作为管理员登录，我们可以在如下 URL 查看用户管理页：

~~~
http://hostname/testdrive/index.php?r=user/admin
~~~

这会显示一个包含用户条目的漂亮表格。我们可以点击表头的单元格来对相应的列进行排序，而且它和列表页一样会自动分页。

实现所有这些功能不要我们编写一行代码！

![用户管理页](first-app6.png)

![新增用户页](first-app7.png)



<div class="revision">$Id: quickstart.first-app.txt 446 2009-01-02 04:42:53Z qiang.xue $</div>