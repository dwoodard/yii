Buforowanie danych (ang. Data Caching)
============

Buforowanie danych dotyczy przechowywania pewnych zmiennych PHP w buforze oraz 
przywracania ich później z buforu. Z tego powodu, podstawowa klasa komponentu buforowania 
[CCache] dostarcza dwóch metod, które są używane przez większość czasu: [set()|CCache::set]
oraz [get()|CCache::get].

Abu zachować zmienną `$value` w buforze, wybieramy unikalne ID oraz wywołujemy 
[set()|CCache::set] aby ją zachować:

~~~
[php]
Yii::app()->cache->set($id, $value);
~~~

Zbuforowane dane pozostaną w buforze na zawsze, dopóki nie zostaną z niego usunięte
ze względu na pewne zachowanie buforowania (np. przestrzeń bufora jest pełna i stare dane 
są usuwane). Aby zmienić to zachowanie, możemy podać parametr wygasania podczas wywoływania 
[set()|CCache::set] co spowoduje, że dane zostaną usunięte z bufora po upływie 
określonego okresu czasu:

~~~
[php]
// trzymaj wartość w buforze najdłużej przez 30 sekund
Yii::app()->cache->set($id, $value, 30);
~~~

Następnie, jeśli potrzebujemy uzyskać dostęp do tej zmiennej 
Later when we need to access this variable (albo w tym samym klub też innym żądaniu) 
wywołujemy [get()|CCache::get] wraz z ID aby zwrócić ją z bufora. Jeśli wartość 
zwracana to false, oznacza to, że wartość nie jest dostępna w buforze i powinniśmy ją 
wygenerować.

~~~
[php]
$value=Yii::app()->cache->get($id);
if($value===false)
{
  // odnów $value ponieważ nie została znaleziona w buforze
	// i zachowaj ja w nim do ponownego użycia 
	// Yii::app()->cache->set($id,$value);
}
~~~

Podczas wybierania ID dla zmiennej, kóra będzie buforowana, upewnij się, że ID jest 
unikalne spośród wszystkich innych zmiennych, które mogą być zbuforowane w aplikacji.
NIE WYMAGA się, aby ID było unikalne pomiędzy aplikacjami, ponieważ komponent cache
jest wystarczająco zmyślny aby rozróżniać te same ID w różnych aplikacjach.

Abu usunąć zbuforowaną wartość z bufora wywołujemy metodę [delete()|CCache::delete];
aby usunąć całą wartość z bufora wołamy [flush()|CCache::flush]. Bądź bardzo ostrożny
podczas wywoływania [flush()|CCache::flush] ponieważ usuwa ono dane, które zostały 
zbuforowane dla innych aplikacji.

> Tip|Porada: Ponieważ [CCache] implementuje dostęp przez tablice `ArrayAccess`
> komponent cache może być używany jak tablica. Poniżej znajduje się kilka przykładów:
> ~~~
> [php]
> $cache=Yii::app()->cache;
> $cache['var1']=$value1;  // równoznaczne z: $cache->set('var1',$value1);
> $value2=$cache['var2'];  // równoznaczne z: $value2=$cache->get('var2');
> ~~~

Zależności w buforowaniu (ang. Cache Dependency)
----------------

Poza opcją wygasania, dane zbuforowane  mogą róznież stracić ważność zgodnie
z pewnymi zmianami zależności. Na przykład, jeśli buforujemy zawartość pewnego 
pliku a plik ulegnie zmianie, powinniśmy unieważnić zbuforowaną kopię i przeczytać
najnowszą zawartość z pliku zamiast tej z bufora.

Reprezentujemy zależność jako instancję klasy [CCacheDependency] lub jej klas pochodnych.
Przekazujemy instancję zależności wraz z danymi do buforowania gdy wywołujemy [set()|CCache::set].

~~~
[php]
// wartość wygasa w ciągu 30 sekund
// może ona również stracić ważność wcześniej jeśli zależny plik jest zmieniony
Yii::app()->cache->set($id, $value, 30, new CFileCacheDependency('NazwaPliku'));
~~~

Teraz jeśli zwrócimy `$value` z bufowu poprzez wywołanie [get()|CCache::get] zależność
zostanie sprawdzona i jeśli zmieni się, zostanie zwrócona wartość false, ze wskazaniem
danych, które wymagają odświeżenia.

Poniżej znajduje się podsumowanie dostępnych zależności buforowania:

   - [CFileCacheDependency]: zależność jest zmieniona jeśli jeśli zmienił się czas
   ostatniej modyfikacji pliku.

   - [CDirectoryCacheDependency]: zależność jest zmieniona jeśli jakikolwiek z plików
   w katalogu lub podkatalogach zmienił się.

   - [CDbCacheDependency]: zależność zmieniłą się jeśli wynik zapytania określonego 
   zapytania SQL zmienił się.

   - [CGlobalStateCacheDependency]: zależność jest zmieniona jeśli wartość określonego 
   globalnego stanu została zmieniona. Globalny stan to zmienna, która jest trwała 
   w aplikacji dla wielu żądań oraz wielu sesji. Jest zdefioniowana poprzez [CApplication::setGlobalState()].

   - [CChainedCacheDependency]: zależność jest zmieniowa jeśli jakakolwiek z zależności 
   w łańcuchu zmieniła się.

<div class="revision">$Id: caching.data.txt 169 2008-11-06 19:43:44Z qiang.xue $</div>