Teman
=====

Användning av teman är ett systematiskt sätt att anpassa utseendet hos sidor i 
en webbapplikation. Genom att applicera ett annat tema, kan man omedelbart 
dramatiskt förändra det övergripande utseendet hos en webbapplikation.

I Yii representeras varje tema av en katalog innehållande vyfiler, layoutfiler 
samt relevanta resursfiler så som bilder, CSS-filer, JavaScript-filer etc. 
Namnet på ett tema är namnet på dess katalog. Alla teman huserar under samma 
katalog, `WebRoot/themes`. Vid varje tillfälle kan endast ett av dessa vara 
aktivt.

> Tip|Tips: Standardrotkatalogen för teman, `WebRoot/themes`, kan konfigureras 
till en anan katalog. Konfigurera bara applikationskomponenten 
[themeManager|CWebApplication::themeManager]:s propertyn 
[basePath|CThemeManager::basePath] och [baseUrl|CThemeManager::baseUrl] efter 
önskemål.

För att aktivera ett tema, sätt webbapplikationens property 
[theme|CWebApplication::theme] till namnet på det önskade temat. 
Detta kan antingen göras i 
[applikationskonfigurationen](/doc/guide/basics.application#application-configuration) 
eller vid körning, i en kontrolleråtgärd.

> Note|Märk: Temanamn är skiftlägeskänsliga (case-sensitive). Om man försöker 
att aktivera ett tema som inte kan hittas returnerar `Yii::app()->theme` `null`.

Innehåll under temats katalog skall organiseras på samma sätt som det under 
[applikationens rotkatalog](/doc/guide/basics.application#application-base-directory). 
Till exempel, alla vyfiler måste placeras under `views`, 
layoutvyfiler under `views/layouts` och systemvyfiler under `views/system`. 
Om vi till exempel vill ersätta vyn `create` tillhörande `PostController` 
med en vy ur temat `classic`, skall den nya vyfilen sparas som 
`WebRoot/themes/classic/views/post/create.php`.

För vyer som tillhör kontrollrar i en [modul](/doc/guide/basics.module), skall även 
motsvarande vyfiler som tillhör teman placeras under katalogen `views`.
Till exempel, om tidigare nämnda `PostController` återfinns i modulen `forum`, 
skall vyfilen `create` sparas som `WebRoot/themes/classic/views/forum/post/create.php`. 
Om modulen `forum` är nästlad i en annan modul, `support`, skall vyfilen istället sparas 
som `WebRoot/themes/classic/views/support/forum/post/create.php`.

> Note|Märk: Eftersom katalogen `views` kan innehålla ur säkerhetssynpunkt känslig data, 
skall den konfigureras för att förhindra webbanvändare tillgång.

Vid anrop till [render|CController::render] eller 
[renderPartial|CController::renderPartial] för att presentera en vy, kommer 
motsvarande vyfil samt layoutfil att eftersökas i det för tillfället aktiva 
temat. Om de hittas används de för renderingen. I annat fall används 
standardplatserna för vyer och layouter specificerade i 
[viewPath|CController::viewPath] respektive 
[layoutPath|CWebApplication::layoutPath].

> Tip|Tips: Inuti en temavy, behöver ofta länkning ske till andra 
temaresursfiler. Till exempel, kan vi vilja visa en bildfil under temats katalog 
`images`. Genom att använda det för tillfället aktiva temats property 
[baseUrl|CTheme::baseUrl], kan en URL för bilden genereras på följande sätt, 

> ~~~ 
> [php] 
> Yii::app()->theme->baseUrl . '/images/FileName.gif' 
> ~~~ 

Nedan följer ett exempel på katalogstruktur för en applikation med två teman, `basic` och `fancy`.

~~~
WebRoot/
	assets
	protected/
		.htaccess
		components/
		controllers/
		models/
		views/
			layouts/
				main.php
			site/
				index.php
	themes/
		basic/
			views/
				.htaccess
				layouts/
					main.php
				site/
					index.php
		fancy/
			views/
				.htaccess
				layouts/
					main.php
				site/
					index.php
~~~

Om vi lägger in följande i applikationskonfigurationen

~~~
[php]
return array(
	'theme'=>'basic',
	......
);
~~~

kommer temat `basic` att gälla, vilket innebär att applikationen hämtar sin layout från 
katalogen `themes/basic/views/layouts`, samt sin indexvy från `themes/basic/views/site`. 
I händelse av att vyfilen inte hittas i temat, används filen från katalogen `protected/views`.

Skin
----

> Note|Märk: Finessen skin har varit tillgänglig sedan version 1.1.0.

Medan användning av teman snabbt kan få vyer att ändra skepnad, kan skin användas 
för att systematiskt anpassa utseendet hos [widgetar](/doc/guide/basics.view#widget) som används i vyer.

En skin består av en array av namn-värdepar som kan användas för att initialisera propertyn i en widget. 
En skin hör till en widgetklass och en widgetklass kan ha flera skin vilka identifieras av dess namn. 
Vi kan till exempel ha en skin benämnd `classic`, tillhörande widgeten [CLinkPager].

För att skin-finessen skall kunna användas måste först komponenten `widgetFactory` installeras i 
applikationskonfigurationen:

~~~
[php]
return array(
    'components'=>array(
        'widgetFactory'=>array(
            'class'=>'CWidgetFactory',
        ),
    ),
);
~~~

Därefter kan önskade skin skapas. Skin som tillhör samma widgetklass lagras i ett gemensamt 
PHP-skript med samma namn som widgetklassen. Samtliga dessa skinfiler lagras som standard 
i katalogen `protected/views/skins`. Detta kan ändras till en annan katalog genom konfigurering 
av propertyn `skinPath` i komponenten `widgetFactory`. Exempelvis en fil `CLinkPager.php`, 
med nedanstående innehåll, skapas i katalogen `protected/views/skins`,

~~~
[php]
<?php
return array(
    'default'=>array(
        'nextPageLabel'=>'&gt;&gt;',
        'prevPageLabel'=>'&lt;&lt;',
    ),
    'classic'=>array(
        'header'=>'',
        'maxButtonCount'=>5,
    ),
);
~~~

I ovanstående exempel skapas två skin för widgeten [CLinkPager]: `default` och `classic`. 
Den förra är den skin som kommer att åsättas varje [CLinkPager] widget där `skin`-propertyn
inte uttryckligen specificerats. Den senare är den skin som åsätts [CLinkPager]-widgetar 
där `skin`-propertyn specificerats som `classic`. I följande vykod kommer den första 
pager-instansen att använda `default`-skin, medan den andra använder `classic`-skin:

~~~
[php]
<?php $this->widget('CLinkPager'); ?>

<?php $this->widget('CLinkPager', array('skin'=>'classic')); ?>
~~~

Om vi skapar en widget med en uppsättning propertyn med givna initialvärden, kommer dessa 
att få prioritet och läggas till varje relevant skin. Till exempel kommer följande vykod 
att skapa en pager vars initialvärden kommer att vara `array('header'=>'', 'maxButtonCount'=>6, 'cssFile'=>false)`,
ett resultat av sammanslagna initialvärden specificerade i vyn respektive i `classic`-skin.

~~~
[php]
<?php $this->widget('CLinkPager', array(
    'skin'=>'classic',
    'maxButtonCount'=>6,
    'cssFile'=>false,
)); ?>
~~~

Lägg märke till att skin-finessen INTE kräver att teman används. Skulle dock ett tema vara aktivt 
kommer Yii även att söka efter skin i underkatalogen `skins` till temats vykatalog 
(t.ex. `WebRoot/themes/classic/views/skins`). I händelse av att en skin med samma namn existerar 
i både temats och huvudapplikationens vykataloger, prioriteras temats skin.

Om en widget använder en skin so minte existerar kommer Yii fortfarande att skapa widgeten som vanligt, 
utan felmeddelanden.

> Info: Användning av skin kan sätta ned prestanda eftersom Yii behöver leta efter skin-filen första gången en widget skapas.


<div class="revision">$Id: topics.theming.txt 1463 2009-10-17 01:49:02Z qiang.xue $</div>