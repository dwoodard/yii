Rekaman Aktif
=============

Meskipun Yii DAO secara virtual dapat menangani setiap tugas-tugas terkait 
database, kenyataannya adalah bahwa kita akan menghabiskan 90% waktu kita dalam 
penulisan beberapa pernyataan SQL yang melakukan operasi umum CRUD (create, 
read, update and delete). Juga akan sulit untuk memelihara kode kita saat 
dicampur dengan pernyataan SQL. Untuk memecahkan masalah ini, kita dapat 
menggunakan Rekaman Aktif.

Rekaman Aktif atau Active Record (AR) adalah teknik populer  Object-Relational Mapping (ORM) atau Pemetaan Relasional-Obyek.
Setiap kelas AR mewakili tabel (atau tampilan) database yang atributnya disajikan sebagai properti kelas AR, dan turunan AR mewakili sebuah baris dalam tabel itu. Operasi umum CRUD diimplementasikan sebagai metode AR. Hasilnya, kita dapat mengakses data kita dalam cara yang lebih terorientasi-obyek. Sebagai contoh, kita dapat menggunakan kode berikut untuk menyisipkan baris baru ke tabel `Post`:

~~~
[php]
$post=new Post;
$post->title='contoh tulisan';
$post->content='konten isi tulisan';
$post->save();
~~~

Dalam contoh di bawah ini kami menjelaskan bagaimana untuk menyiapkan AR dan menggunakannya guna melakukan operasi CRUD. Kami akan memperlihatkan bagaimana cara memakai AR dalam menghadapi keterkaitan database oada seksi berikutnya. Untuk menyederhanakan, kami menggunakan tabel database berikut sebagai contoh dalam seksi ini.

~~~
[sql]
CREATE TABLE Post (
	id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	title VARCHAR(128) NOT NULL,
	content TEXT NOT NULL,
	createTime INTEGER NOT NULL
);
~~~

> Note|Catatan: AR tidak ditujukan untuk memecahkan semua tugas-tugas terkait 
database. Ia lebih baik dipakai untuk memodelkan tabel database dalam 
konstruksi PHP dan melakukan queri yang tidak melibatkan SQL yang kompleks. Yii 
DAO harus dipakai dalam skenario komples itu.

Melakukan Sambungan DB
----------------------

AR bergantung pada sambungan DB untuk melakukan operasi terkait-DB. Secara standar, dianggap bahwa komponen aplikasi `db` memberikan turunan 
[CDbConnection] yang diperlukan untuk bertindak sebagai koneksi DB. Konfigurasi aplikasi berikut memperlihatkan contoh:

~~~
[php]
return array(
	'components'=>array(
		'db'=>array(
			'class'=>'system.db.CDbConnection',
			'connectionString'=>'sqlite:path/ke/dbfile',
			// hidupkan skema cache untuk meningkatkan performansi
			// 'schemaCachingDuration'=>3600,
		),
	),
);
~~~

> Tip: Because Active Record relies on the metadata about tables to
determine the column information, it takes time to read the metadata and
analyze it. If the schema of your database is less likely to be changed,
you should turn on schema caching by configuring the
[CDbConnection::schemaCachingDuration] property to be a value greater than
0.

Support for AR is limited by DBMS. Currently, only the following DBMS are
supported:

   - [MySQL 4.1 or later](http://www.mysql.com)
   - [PostgreSQL 7.3 or later](http://www.postgres.com)
   - [SQLite 2 and 3](http://www.sqlite.org)

If you want to use an application component other than `db`, or if you
want to work with multiple databases using AR, you should override
[CActiveRecord::getDbConnection()]. The [CActiveRecord] class is the base
class for all AR classes.

> Tip: There are two ways to work with multiple databases in AR. If the
schemas of the databases are different, you may create different base AR
classes with different implementation of
[getDbConnection()|CActiveRecord::getDbConnection]. Otherwise, dynamically
changing the static variable [CActiveRecord::db] is a better idea.

Defining AR Class
-----------------

To access a database table, we first need to define an AR class by
extending [CActiveRecord]. Each AR class represents a single database
table, and an AR instance represents a row in that table. The following
example shows the minimal code needed for the AR class representing the
`Post` table.

~~~
[php]
class Post extends CActiveRecord
{
	public static function model($className=__CLASS__)
	{
		return parent::model($className);
	}
}
~~~

> Tip: Because AR classes are often referenced in many places, we can
> import the whole directory containing the AR class, instead of including
> them one by one. For example, if all our AR class files are under
> `protected/models`, we can configure the application as follows:
> ~~~
> [php]
> return array(
> 	'import'=>array(
> 		'application.models.*',
> 	),
> );
> ~~~

By default, the name of the AR class is the same as the database table
name. Override the [tableName()|CActiveRecord::tableName] method if they
are different. The [model()|CActiveRecord::model] method is declared as
such for every AR class (to be explained shortly).

Column values of a table row can be accessed as properties of the
corresponding AR class instance. For example, the following code sets the
`title` column (attribute):

~~~
[php]
$post=new Post;
$post->title='a sample post';
~~~

Although we never explicitly declare the `title` property in the `Post`
class, we can still access it in the above code. This is because `title` is
a column in the `Post` table, and CActiveRecord makes it accessible as a
property with the help of the PHP `__get()` magic method. An exception will
be thrown if we attempt to access a non-existing column in the same way.

> Info: For better readability, we suggest naming database tables and
columns in camel case. In particular, table names are formed by
capitalizing each word in the name and joining them without spaces; column
names are similar to table names except their first letter is in lower
case. For example, we use `Post` to name the table storing posts; and we
use `createTime` to name the table's primary key column. This makes tables
look more like class types and columns like variables. Note, however, using camel case may also bring you inconvenience for some DBMS, such as MySQL, as they may behave differently on different operation systems.


Creating Record
---------------

To insert a new row into a database table, we create a new instance of the
corresponding AR class, set its properties associated with the table
columns, and call the [save()|CActiveRecord::save] method to finish the
insertion.

~~~
[php]
$post=new Post;
$post->title='sample post';
$post->content='content for the sample post';
$post->createTime=time();
$post->save();
~~~

If the table's primary key is auto-incremental, after the insertion the AR
instance will contain an updated primary key. In the above example, the
`id` property will reflect the primary key value of the newly inserted
post, even though we never change it explicitly.

If a column is defined with some static default value (e.g. a string, a
number) in the table schema, the corresponding property in the AR instance
will automatically has such a value after the instance is created. One way
to change this default value is by explicitly declaring the property in the
AR class:

~~~
[php]
class Post extends CActiveRecord
{
	public $title='please enter a title';
	......
}

$post=new Post;
echo $post->title;  // this would display: please enter a title
~~~

Starting from version 1.0.2, an attribute can be assigned a value of [CDbExpression]
type before the record is saved (either insertion or updating) to the database.
For example, in order to save a timestamp returned by the MySQL `NOW()` function,
we can use the following code:

~~~
[php]
$post=new Post;
$post->createTime=new CDbExpression('NOW()');
// $post->createTime='NOW()'; will not work because
// 'NOW()' will be treated as a string
$post->save();
~~~


Reading Record
--------------

To read data in a database table, we call one of the `find` methods as
follows.

~~~
[php]
// find the first row satisfying the specified condition
$post=Post::model()->find($condition,$params);
// find the row with the specified primary key
$post=Post::model()->findByPk($postID,$condition,$params);
// find the row with the specified attribute values
$post=Post::model()->findByAttributes($attributes,$condition,$params);
// find the first row using the specified SQL statement
$post=Post::model()->findBySql($sql,$params);
~~~

In the above, we call the `find` method with `Post::model()`. Remember
that the static method `model()` is required for every AR class. The method
returns an AR instance that is used to access class-level methods
(something similar to static class methods) in an object context.

If the `find` method finds a row satisfying the query conditions, it will
return a `Post` instance whose properties contain the corresponding column
values of the table row. We can then read the loaded values like we do with
normal object properties, for example, `echo $post->title;`.

The `find` method will return null if nothing can be found in the database
with the given query condition.

When calling `find`, we use `$condition` and `$params` to specify query
conditions. Here `$condition` can be string representing the `WHERE` clause
in a SQL statement, and `$params` is an array of parameters whose values
should be bound to the placeholders in `$condition`. For example,

~~~
[php]
// find the row with postID=10
$post=Post::model()->find('postID=:postID', array(':postID'=>10));
~~~

We can also use `$condition` to specify more complex query conditions.
Instead of a string, we let `$condition` be a [CDbCriteria] instance, which
allows us to specify conditions other than the `WHERE` clause. For example,

~~~
[php]
$criteria=new CDbCriteria;
$criteria->select='title';  // only select the 'title' column
$criteria->condition='postID=:postID';
$criteria->params=array(':postID'=>10);
$post=Post::model()->find($criteria); // $params is not needed
~~~

Note, when using [CDbCriteria] as query condition, the `$params` parameter
is no longer needed since it can be specified in [CDbCriteria], as shown
above.

An alternative way to [CDbCriteria] is passing an array to the `find` method.
The array keys and values correspond to the criteria's property name and value,
respectively. The above example can be rewritten as follows,

~~~
[php]
$post=Post::model()->find(array(
	'select'=>'title',
	'condition'=>'postID=:postID',
	'params'=>array(':postID'=>10),
));
~~~

> Info: When a query condition is about matching some columns with the
specified values, we can use
[findByAttributes()|CActiveRecord::findByAttributes]. We let the
`$attributes` parameters be an array of the values indexed by the column
names. In some frameworks, this task can be achieved by calling methods
like `findByNameAndTitle`. Although this approach looks attractive, it
often causes confusion, conflict and issues like case-sensitivity of column
names.

When multiple rows of data matching the specified query condition, we can
bring them in all together using the following `findAll` methods, each of
which has its counterpart `find` method, as we already described.

~~~
[php]
// find all rows satisfying the specified condition
$posts=Post::model()->findAll($condition,$params);
// find all rows with the specified primary keys
$posts=Post::model()->findAllByPk($postIDs,$condition,$params);
// find all rows with the specified attribute values
$posts=Post::model()->findAllByAttributes($attributes,$condition,$params);
// find all rows using the specified SQL statement
$posts=Post::model()->findAllBySql($sql,$params);
~~~

If nothing matches the query condition, `findAll` would return an empty
array. This is different from `find` who would return null if nothing is
found.

Besides the `find` and `findAll` methods described above, the following
methods are also provided for convenience:

~~~
[php]
// get the number of rows satisfying the specified condition
$n=Post::model()->count($condition,$params);
// get the number of rows using the specified SQL statement
$n=Post::model()->countBySql($sql,$params);
// check if there is at least a row satisfying the specified condition
$exists=Post::model()->exists($condition,$params);
~~~

Updating Record
---------------

After an AR instance is populated with column values, we can change them
and save them back to the database table.

~~~
[php]
$post=Post::model()->findByPk(10);
$post->title='new post title';
$post->save(); // save the change to database
~~~

As we can see, we use the same [save()|CActiveRecord::save] method to
perform insertion and updating operations. If an AR instance is created
using the `new` operator, calling [save()|CActiveRecord::save] would insert
a new row into the database table; if the AR instance is the result of some
`find` or `findAll` method call, calling [save()|CActiveRecord::save] would
update the existing row in the table. In fact, we can use
[CActiveRecord::isNewRecord] to tell if an AR instance is new or not.

It is also possible to update one or several rows in a database table
without loading them first. AR provides the following convenient
class-level methods for this purpose:

~~~
[php]
// update the rows matching the specified condition
Post::model()->updateAll($attributes,$condition,$params);
// update the rows matching the specified condition and primary key(s)
Post::model()->updateByPk($pk,$attributes,$condition,$params);
// update counter columns in the rows satisfying the specified conditions
Post::model()->updateCounters($counters,$condition,$params);
~~~

In the above, `$attributes` is an array of column values indexed by column
names; `$counters` is an array of incremental values indexed by column
names; and `$condition` and `$params` are as described in the previous
subsection.

Deleting Record
---------------

We can also delete a row of data if an AR instance has been populated with
this row.

~~~
[php]
$post=Post::model()->findByPk(10); // assuming there is a post whose ID is 10
$post->delete(); // delete the row from the database table
~~~

Note, after deletion, the AR instance remains unchanged, but the
corresponding row in the database table is already gone.

The following class-level methods are provided to delete rows without the
need of loading them first:

~~~
[php]
// delete the rows matching the specified condition
Post::model()->deleteAll($condition,$params);
// delete the rows matching the specified condition and primary key(s)
Post::model()->deleteByPk($pk,$condition,$params);
~~~

Data Validation
---------------

When inserting or updating a row, we often need to check if the column
values comply to certain rules. This is especially important if the column
values are provided by end users. In general, we should never trust
anything coming from the client side.

AR performs data validation automatically when
[save()|CActiveRecord::save] is being invoked. The validation is based on
the rules specified by in the [rules()|CModel::rules] method of the AR class.
For more details about how to specify validation rules, refer to
the [Declaring Validation Rules](/doc/guide/form.model#declaring-validation-rules)
section. Below is the typical workflow needed by saving a record:

~~~
[php]
if($post->save())
{
	// data is valid and is successfully inserted/updated
}
else
{
	// data is invalid. call getErrors() to retrieve error messages
}
~~~

When the data for inserting or updating is submitted by end users in an
HTML form, we need to assign them to the corresponding AR properties. We
can do so like the following:

~~~
[php]
$post->title=$_POST['title'];
$post->content=$_POST['content'];
$post->save();
~~~

If there are many columns, we would see a long list of such assignments.
This can be alleviated by making use of the
[attributes|CActiveRecord::attributes] property as shown below. More
details can be found in the [Securing Attribute Assignments](/doc/guide/form.model#securing-attribute-assignments)
section and the [Creating Action](/doc/guide/form.action) section.

~~~
[php]
// assume $_POST['Post'] is an array of column values indexed by column names
$post->attributes=$_POST['Post'];
$post->save();
~~~


Comparing Records
-----------------

Like table rows, AR instances are uniquely identified by their primary key
values. Therefore, to compare two AR instances, we merely need to compare
their primary key values, assuming they belong to the same AR class. A
simpler way is to call [CActiveRecord::equals()], however.

> Info: Unlike AR implementation in other frameworks, Yii supports
composite primary keys in its AR. A composite primary key consists of two
or more columns. Correspondingly, the primary key value is represented as
an array in Yii. The [primaryKey|CActiveRecord::primaryKey] property gives
the primary key value of an AR instance.

Customization
-------------

[CActiveRecord] provides a few placeholder methods that can be overridden
in child classes to customize its workflow.

   - [beforeValidate|CModel::beforeValidate] and
[afterValidate|CModel::afterValidate]: these are invoked before and
after validation is performed.

   - [beforeSave|CActiveRecord::beforeSave] and
[afterSave|CActiveRecord::afterSave]: these are invoked before and after
saving an AR instance.

   - [beforeDelete|CActiveRecord::beforeDelete] and
[afterDelete|CActiveRecord::afterDelete]: these are invoked before and
after an AR instance is deleted.

   - [afterConstruct|CActiveRecord::afterConstruct]: this is invoked for
every AR instance created using the `new` operator.

   - [afterFind|CActiveRecord::afterFind]: this is invoked for every AR
instance created as a result of query.


Using Transaction with AR
-------------------------

Every AR instance contains a property named
[dbConnection|CActiveRecord::dbConnection] which is a [CDbConnection]
instance. We thus can use the
[transaction](/doc/guide/database.dao#using-transactions) feature provided by Yii
DAO if it is desired when working with AR:

~~~
[php]
$model=Post::model();
$transaction=$model->dbConnection->beginTransaction();
try
{
	// find and save are two steps which may be intervened by another request
	// we therefore use a transaction to ensure consistency and integrity
	$post=$model->findByPk(10);
	$post->title='new post title';
	$post->save();
	$transaction->commit();
}
catch(Exception $e)
{
	$transaction->rollBack();
}
~~~

<div class="revision">$Id: database.ar.txt 687 2009-02-17 02:57:56Z qiang.xue $</div>