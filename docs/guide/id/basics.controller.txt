Kontroler(Controller)
====================

Sebuah `kontroler` (pengontrol) adalah turunan dari [CController] atau anak kelasnya.
Kontroler dibuat oleh aplikasi saat pengguna memintanya. Ketika berjalan, kontroler
melakukan aksi(action) yang diminta yang biasanya memerlukan model
dan membuat tampilan yang sesuai. Sebuah `aksi`, dalam bentuk paling sederhana sebenarnya
hanyalah metode kelas kontroler yang namanya dimulai dengan `action`.

Kontroler memiliki aksi standar. Ketika permintaan pengguna tidak menetapkan
aksi mana yang dijalankan, aksi standar yang akan dijalankan. Biasanya
aksi standar dinamai sebagai `index`. Ia bisa diubah dengan menyetel
[CController::defaultAction].

Berikut ini adalah kode minimal yang diperlukan oleh kelas kontroler. Karena kontroler ini
tidak mendefinisikan aksi apapun, maka jika memanggilnya akan terjadi kesalahan.

~~~
[php]
class SiteController extends CController
{
}
~~~


Rute(Route)
-----------

Kontroler dan aksi diidentifikasi oleh ID. ID Kontroler dalam
format `path/ke/xyz` sesuai dengan letak file kelas kontroler di
`protected/controllers/path/ke/XyzController.php`. `xyz`
harus diganti dengan nama sebenarnya (contoh, `post` pada
`protected/controllers/PostController.php`). ID Aksi adalah nama metode
aksi tanpa berawalan `action`. Sebagai contoh, jika kelas kontroler berisi
sebuah metode bernama `actionEdit`, ID dari aksi tersebut adalah
`edit`.

> Note|Catatan: Sebelum versi 1.0.3, format ID kontroler adalah `path.ke.xyz`
sedangkan sekarang dalam format `path/ke/xyz`.

Permintaan pengguna terhadap kontroler dan aksi tertentu sesuai dengan aturan rute.
Rute dibentuk dengan menggabungkan ID kontroler dan ID aksi yang dipisahkan
dengan garis miring. Sebagai contoh, rute `post/edit` merujuk ke `PostController`
dan aksi `edit`. Dan secara standar, URL
`http://hostname/index.php?r=post/edit` akan meminta kontroler dan 
aksi tersebut.

>Note|Catatan: Secara default, rute bersifat case-sensitive. Sejak versi 1.0.1, dimungkinkan
>menjadikan rute tidak bersifat case-sensitive dengan mengatur [CUrlManager::caseSensitive]
>menjadi false dalam konfigurasi aplikasi. Ketika dalam mode tidak bersifat case-sensitive,
>pastikan Anda mengikuti konvensi bahwa direktori yang berisi file kelas kontroler
>dalam huruf kecil, dan [peta kontroler|CWebApplication::controllerMap]
>serta [peta aksi|CController::actions] keduanya menggunakan kunci dalam huruf kecil.

Semenjak versi 1.0.3, sebuah aplikasi bisa berisi [modul](/doc/guide/basics.module). Rute aksi kontroler di dalam sebuah modul yakni dalam format `moduleID/controllerID/actionID`. Untuk lebih rinci, lihat [bagian mengenai modul](/doc/guide/basics.module).


Instansiasi Kontroler
-------------------

Turunan kontroler dibuat ketika [CWebApplication] menangani permintaan
yang masuk. Berdasarkan ID kontroler yang diberikan, aplikasi akan
menentukan kelas kontroler apa dan di manafile kelas ditempatkan, dengan menggunakan
aturan berikut.

   - Jika [CWebApplication::catchAllRequest] ditetapkan, kontroler
akan dibuat berdasarkan properti ini, dam ID kontroler yang ditetapkan pengguna
akan diabaikan. Ini dipakai terutama untuk menyimpan aplikasi dalam mode
pemeliharaan dan menampilkan halaman statis pemberitahuan.

   - Jika ID ditemukan dalam [CWebApplication::controllerMap], konfigurasi
kontroler terkait akan dipakai dalam membuat turunan
kontroler.

   - Jika ID ada dalam format `'path/ke/xyz'`, nama kelas kontroler
diasumsikan adalah `XyzController` dan file kelas terkait adalah
`protected/controllers/path/ke/XyzController.php`. Sebagai contoh, ID kontroler
`admin/user` akan dipecahkan sebagai kelas kontroler `UserController`
dan file kelas `protected/controllers/admin/UserController.php`.
Jika file kelas tidak ada, 404 [CHttpException] akan dimunculkan.

Dalam hal ketika [modul](/doc/guide/basics.module) dipakai (tersedia sejak versi 1.0.3), proses di atas cukup berbeda. Dalam keadaan tertentu, aplikasi akan memeriksa apakah ID merujuk ke kontroler di dalam sebuah modul, dan jika demikian, turunan modul akan dibuat lebih dulu diikuti dengan turunan kontroler.


Action (Aksi)
------------

Seperti yang telah disinggung, action dapat didefinisikan sebagai metode yang namanya dimulai
dengan kata `action`. Cara lebih maju adalah dengan mendefinisikan kelas action
dan meminta kontroler untuk menurunkannya apabila diperlukan. Dengan demikian memungkinkan sebuah action
untuk dipakai ulang.

Untuk mendefinisikan kelas action baru, lakukan hal berikut:

~~~
[php]
class UpdateAction extends CAction
{
	public function run()
	{
		// tempat logika action di sini
	}
}
~~~

Agar kontroler menyadari adanya action ini, kita override metode
[actions()|CController::actions] pada kelas kontroler kita:

~~~
[php]
class PostController extends CController
{
	public function actions()
	{
		return array(
			'edit'=>'application.controllers.post.UpdateAction',
		);
	}
}
~~~

Di atas, kita menggunakan alias path
`application.controllers.post.UpdateAction` untuk menetapkan apakah file kelas
action adalah `protected/controllers/post/UpdateAction.php`.

Dengan menulis aksi berbasis-kelas, kita dapat mengatur aplikasi dalam gaya
modular. Sebagai contoh, struktur direktori berikut dapat dipakai untuk
mengatur kode kontroler:

~~~
protected/
    controllers/
        PostController.php
        UserController.php
        post/
            CreateAction.php
            ReadAction.php
            UpdateAction.php
        user/
            CreateAction.php
            ListAction.php
            ProfileAction.php
            UpdateAction.php
~~~

Pengikatan Parameter Aksi(Action Parameter Binding)
---------------------------------------------------
Semenjak versi 1.1.4, Yii telah menambah dukungan pengikatan parameter aksi otomatis, 
yakni sebuah aksi kontroler dapat mendefinisikan parameter yang nilainya akan secara 
otomatis diisi oleh Yii dari nilai `$_GET`.

Untuk menjelaskan fitur ini, mari kita asumsi bahwa kita perlu membuat sebuah aksi `create`
pada `PostController`. Aksi ini memerlukan dua buah parameter :

   * `category`: sebuah integer yang menunjukkan ID kategori ke berapa post baru yang
akan dibuat.
   * `language`: sebuah string yang mewakili kode bahasa pada post baru.

Kita mungkin akan menggunakan coding berikut ini untuk mendapatkan nilai yang
diinginkan dari parameter `$_GET`:

~~~
[php]
class PostController extends CController
{
    public function actionCreate()
    {
        if(isset($_GET['category']))
            $category=(int)$_GET['category'];
        else
            throw new CHttpException(404,'invalid request');

        if(isset($_GET['language']))
            $language=$_GET['language'];
        else
            $language='en';

        // ... mulai koding di sini...
    }
}
~~~

Sekarang, dengan menggunakan fitur parameter aksi, kita bisa mendapatkan hasil sama lebih gampang :

~~~
[php]
class PostController extends CController
{
    public function actionCreate($category, $language='en')
    {
        $category=(int)$category;

        // ... mulai koding di sini...
    }
}
~~~

Perhatikan bahwa kita menambahkan dua buah parameter ke metode aksi `actionCreate`.
Nama parameter ini haruslah sama persis dengan nama yang ingin didapatkan dari `$_GET`. Parameter
`$language` mengambil nilai default `en` apabila ternyata pengguna tidak
memberikan nilai pada parameter. Karena `$category` tidak memiliki nilai default,
maka jika pengguna tidak memberikan parameter `category` di `$_GET`
sebuah [CHttpException](kode kesalahan 400) akan dikeluarkan secara otomatis.

Mulai dari versi 1.1.5, Yii juga akan mendukung pendeteksian jenis array untuk parameter action.
Ini dapat dilakukan dengan PHP type hinting (pemberian petunjuk jenis PHP) dengan menggunakan sintaks berikut :

~~~
[php]
class PostController extends CController
{
	public function actionCreate(array $categories)
	{
		// Yii akan memastikan $categories menjadi sebuah array
	}
}
~~~

Demikianlah, kita menambah kata kunci `array` di depan `$categories` dalam deklarasi
parameter metode tersebut. Dengan melakukan demikian, jika `$_GET['categories']` adalah
sebuah string sederhana, akan diubah menjadi sebuah array yang terdiri dari string tersebut.

> Note|Catatan: Jika sebuah parameter dideklarasi tanpa petunjuk jenis `array`, ituartinya parameter tersebut
> haruslah skalar (misalnya bukan array). Dalam kasus ini, mem-pass sebuah parameter array dengan
> `$_GET` akan mengakibatkan eksepsi HTTP.


Filter
------

Filter adalah kode yang dikonfigurasi untuk dijalankan sebelum dan/atau
setelah aksi kontroler dijalankan. Misalnya, filter kontrol akses
dapat dijalankan guna memastikan bahwa pengguna diotentikasi sebelum menjalankan
aksi yang diminta; filter kinerja bisa dipakai untuk mengukur waktu
yang diperlukan dalam menjalankan aksi.

Aksi bisa memiliki multipel filter. Filter dijalankan dalam urutan seperti
yang terlihat dalam daftar filter. Filter bisa menjaga eksekusi aksi dan filter
lain yang tidak dieksekusithe action and the rest of the unexecuted filters.

Filter bisa didefinisikan sebagai metode kelas kontroler. Nama metode harus 
dimulai dengan `filter`. Sebagai contoh, keberadaan metode
`filterAccessControl` mendefinisikan sebuah filter bernama `accessControl`. 
Metode filter harus bertanda:

~~~
[php]
public function filterAccessControl($filterChain)
{
	// panggil $filterChain->run() untuk melanjutkan penyaringan dan eksekusi aksi
}
~~~

di mana `$filterChain` adalah turunan [CFilterChain] yang menggambarkan daftar
filter yang dikaitkan dengan aksi yang diminta. Di dalam metode filter, kita
dapat memanggil `$filterChain->run()` untuk melanjutkan penyaringan dan jalannya
aksi.

Filter juga dapat berupa turunan [CFilter] atau anak kelasnya. Kode
berikut mendefinisikan kelas filter baru:

~~~
[php]
class PerformanceFilter extends CFilter
{
	protected function preFilter($filterChain)
	{
		// logika sedang diterapkan sebelum aksi dieksekusi
		return true; // false jika aksi tidak dieksekusi
	}

	protected function postFilter($filterChain)
	{
		// logika sedang diterapkan setelah aksi dieksekusi
	}
}
~~~

Untuk menerapkan filter terhadap aksi, kita perlu menimpa metode
`CController::filters()`. Metode harus mengembalikan array konfigurasi
filter. Contoh,

~~~
[php]
class PostController extends CController
{
	......
	public function filters()
	{
		return array(
			'postOnly + edit, create',
			array(
				'application.filters.PerformanceFilter - edit, create',
				'unit'=>'second',
			),
		);
	}
}
~~~

Kode di atas menetapkan dua filter: `postOnly` dan `PerformanceFilter`.
Filter `postOnly` berbasis-metode (metode filter terkait sudah didefinisikan
dalam [CController]); sementara filter `PerformanceFilter` berbasis
obyek. Alias path `application.filters.PerformanceFilter`
menetapkan bahwa file kelas filter adalah
`protected/filters/PerformanceFilter`. Kita menggunakan array untuk mengkonfigurasi
`PerformanceFilter` agar ia dapat dipakai guna menginisialisasi nilai
properti obyek filter. Di sini, properti `unit` pada
`PerformanceFilter` akan diinisialisasi sebagai `'second'`.

Dengan menggunakan operator plus dan minus, kita dapat menetapakan aksi mana
yang harus dan tidak diterapkan oleh filter. Dalam contoh di atas, `postOnly`
harus diterapkan ke aksi `edit` dan `create`, sementara
`PerformanceFilter` harus diterapkan ke semua aksi KECUALI `edit` dan
`create`. Jika plus maupun minus tidak muncul dalam konfigurasi filter,
maka filter akan diterapkan ke semua aksi.

<div class="revision">$Id: basics.controller.txt 2576 2010-10-28 02:46:14Z qiang.xue $</div>