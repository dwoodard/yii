Menggunakan Ekstensi
====================

Menggunakan ekstensi biasanya berkaitan dengan tiga langkah berikut:

  1. Download ekstensi dari
     [repositori ekstensi](http://www.yiiframework.com/extensions/) Yii.
  2. Urai ekstensi di bawah subdirektori `extensions/xyz` pada
     [direktori basis aplikasi](/doc/guide/basics.application#application-base-directory),
     di mana `xyz` adalah nama ekstensi.
  3. Impor, konfigurasi dan gunakan ekstensi.

Setiap ekstensi memiliki nama yang secara identitas unik diantara semua ekstensi.
Ekstensi diberi nama `xyz`, kita dapat menggunakan alias path `ext.xyz` untuk 
menempatkannya pada basis direktori yang berisi semua file `xyz`.

> Note|Catatan: Alias path root `ext` sudah tersedia sejak versi 1.0.8.
Sebelumnya, kita perlu menggunakan `application.extensions` untuk merujuk ke
direktori yang berisi semua ekstensi. Dalam penjelasan berikut, kita
menganggap `ext` sudah didefinisikan. Anda perlu menggantinya dengan `application.extensions`
jika Anda menggunakan versi 1.0.7 atau lebih rendah.

Ekstensi yang berbeda memiliki persyaratan mengenai pengimporan,
konfigurasi dan pemakaian. Selanjutnya, kita meringkas skenario pemakaian umum
mengenai ekstensi, berdasarkan pada kategorisasinya seperti dijelaskan dalam
[tinjauan](/doc/guide/extension.overview).


Komponen Aplikasi
-----------------

Untuk menggunakan [komponen aplikasi](/doc/guide/basics.application#application-component),
kita perlu mengubah [konfigurasi aplikasi](/doc/guide/basics.application#application-configuration)
lebih dulu dengan menambahkan entri baru pada properti `components`, seperti berikut:

~~~
[php]
return array(
    // 'preload'=>array('xyz',...),
    'components'=>array(
        'xyz'=>array(
            'class'=>'ext.xyz.XyzClass',
            'property1'=>'value1',
            'property2'=>'value2',
        ),
        // konfigurasi komponen lainnya
    ),
);
~~~

Selanjutnya, kita dapat mengakses komponen di mana saja mengunakan `Yii::app()->xyz`. Komponen
ini akan dibuat secara lazy (yakni, dibuat saat diakses untuk pertama kali)
kecuali kita mendaftar properti `preload`.


Behavior
--------

[Behavior](/doc/guide/basics.component#component-behavior) bisa dipakai dalam semua komponen.
Pemakaiannya mencakup dua langkah. Dalam langkah pertama, behavior dilampirkan ke sasaran komponen.
Dalam langkah kedua, metode behavior dipanggil melalui sasaran komponen. Sebagai contoh:

~~~
[php]
// $name secara unik mengidentifikasi behavior dalam komponen
$component->attachBehavior($name,$behavior);
// test() adalah metode $behavior
$component->test();
~~~

Seringkali sebuah behavior dilampirkan ke komponen menggunakan cara konfiguratif dariapada
memanggil metode `attachBehavior`. Sebagai contoh, untuk melampirkan behavior ke sebuah
[komponen aplikasi](/doc/guide/basics.application#application-component), kita dapat
menggunakan
[konfigurasi aplikasi](/doc/guide/basics.application#application-configuration) berikut:

~~~
[php]
return array(
	'components'=>array(
		'db'=>array(
			'class'=>'CDbConnection',
			'behaviors'=>array(
				'xyz'=>array(
					'class'=>'ext.xyz.XyzBehavior',
					'property1'=>'value1',
					'property2'=>'value2',
				),
			),
		),
		//....
	),
);
~~~

Kode di atas melampirkan behavior `xyz` ke komponen aplikasi `db`. Kita dapat melakukannya
karena [CApplicationComponent] mendefinisikan properti bernama `behaviors`. Dengan menyetel properti ini
dengan sebuah daftar konfigurasi behavior, komponen akan melampirkan behavior terkait
saat ia diinisialisasi.

Untuk kelas [CController], [CFormModel] dan [CActiveModel] yang biasanya harus diperluas,
melampirkan behaviors dikerjakan dengan menimpa metode `behaviors()`. Sebagai contoh,

~~~
[php]
public function behaviors()
{
	return array(
		'xyz'=>array(
			'class'=>'ext.xyz.XyzBehavior',
			'property1'=>'value1',
			'property2'=>'value2',
		),
	);
}
~~~


Widget
------

[Widget](/doc/guide/basics.view#widget) dipakai terutama dalam [tampilan](/doc/guide/basics.view).
Kelas widget yang diberiktan `XyzClass` dimiliki oleh ekstensi `xyz`, kita bisa menggunakannya dalam
sebuah tampilan seperti berikut,

~~~
[php]
// widget yang tidak memerlukan konten body
<?php $this->widget('application.extensions.xyz.XyzClass', array(
    'property1'=>'value1',
    'property2'=>'value2')); ?>

// widget yang dapat berisi konten body
<?php $this->beginWidget('application.extensions.xyz.XyzClass', array(
    'property1'=>'value1',
    'property2'=>'value2')); ?>

...konten body widget...

<?php $this->endWidget(); ?>
~~~

Aksi
----

[Aksi](/doc/guide/basics.controller#action) dipakai oleh [kontroler](/doc/guide/basics.controller)
untuk merespon permintaan spesifik pengguna. Kelas aksi `XyzClass` dimiliki oleh ekstensi
`xyz`, kita dapat menggunakannya dengan menimpa metode [CController::actions] dalam
kelas kontroler kita:

~~~
[php]
class TestController extends CController
{
	public function actions()
	{
		return array(
			'xyz'=>array(
				'class'=>'application.extensions.xyz.XyzClass',
				'property1'=>'value1',
				'property2'=>'value2',
			),
			// aksi lainnya
		);
	}
}
~~~

Selanjutnya, aksi dapat diakses via [rute](/doc/guide/basics.controller#route)
`test/xyz`.

Filter
------
[Filter](/doc/guide/basics.controller#filter) juga dipakai oleh [kontroler](/doc/guide/basics.controller).
Terutama pre- dan post-process permintaan pengguna saat ia ditangani oleh sebuah
[aksi](/doc/guide/basics.controller#action).
Kelas filter `XyzClass` dimiliki oleh
ekstensi `xyz`, kita dapat menggunakannya dengan menimpa metode [CController::filters]
dalam file kontroler kita:

~~~
[php]
class TestController extends CController
{
	public function filters()
	{
		return array(
			array(
				'application.extensions.xyz.XyzClass',
				'property1'=>'value1',
				'property2'=>'value2',
			),
			// filter lainnya
		);
	}
}
~~~

Dalam contoh di atas, kita dapat menggunakan operator plus dan minus dalam elemen pertama array
untuk menerapkan filter ke aksi terbatas saja. Untuk lebih jelasnya, silahkan merujuk ke
dokumentasi [CController].

Kontroler
----------
[Kontroler](/doc/guide/basics.controller) menyediakan satu set aksi yang dapat diminta
oleh pengguna. Untuk menggunakan ekstensi kontroler, kita perlu mengkonfigurasi
properti [CWebApplication::controllerMap] dalam
[konfigurasi aplikasi](/doc/guide/basics.application#application-configuration):

~~~
[php]
return array(
	'controllerMap'=>array(
		'xyz'=>array(
			'class'=>'application.extensions.xyz.XyzClass',
			'property1'=>'value1',
			'property2'=>'value2',
		),
		// kontroler lainnya
	),
);
~~~

Kemudian, aksi `a` dalam kontroler dapat diakses via
[rute](/doc/guide/basics.controller#route) `xyz/a`.

Validator
---------
Validator dipakai terutama dalam kelas [model](/doc/guide/basics.model)
(salah satu yang diperluas baik dari [CFormModel] ataupun [CActiveRecord]).
Kelas validator `XyzClass` dimiliki oleh
ekstensi `xyz`, kita bisa menggunakannya dengan menimpa metode [CModel::rules]
dalam kelas model kita:

~~~
[php]
class MyModel extends CActiveRecord // atau CFormModel
{
	public function rules()
	{
		return array(
			array(
				'attr1, attr2',
				'application.extensions.xyz.XyzClass',
				'property1'=>'value1',
				'property2'=>'value2',
			),
			// aturan validasi lainnya
		);
	}
}
~~~

Perintah Konsol
---------------
Ekstensi [perintah konsol](/doc/guide/topics.console) biasanya meningkatkan
piranti `yiic` dengan perintah tambahan. Perintah konsol
`XyzClass` dimiliki oleh ekstensi `xyz`, kita bisa menggunakannya dengan mengatur
file konfigurasi untuk aplikasi konsol:

~~~
[php]
return array(
	'commandMap'=>array(
		'xyz'=>array(
			'class'=>'application.extensions.xyz.XyzClass',
			'property1'=>'value1',
			'property2'=>'value2',
		),
		// perintah lainnya
	),
);
~~~

Selanjutnya, kita dapat menggunakan piranti `yiic` yang disertai dengan perintah
tambahan `xyz`.

> Note|Catatan: Aplikasi konsol biasanya menggunakan file konfigurasi
yang berbeda dari yang dipakai oleh aplikasi Web. Jika aplikasi dibuat
menggunakan perintah `yiic webapp`, maka file konfigurasi untuk aplikasi
konsol `protected/yiic` adalah `protected/config/console.php`,
sementara file konfigurasi untuk aplikasi Web adalah `protected/config/main.php`.


Modul
-----
Silahkan merujuk ke seksi mengenai [modul](/doc/guide/basics.module#using-module) bagaimana menggunakan modul.


Komponen Generik
----------------
Untuk menggunakan [komponen](/doc/guide/basics.component) generik, pertama
kita perlu menyertakan file kelasnya dengan menggunakan

~~~
Yii::import('ext.xyz.XyzClass');
~~~

Selanjutnya, kita dapat membuat turunan kelas, mengkonfigurasi propertinya,
dan memanggi metodenya. Kita juga bisa memperluasnya untuk membuat anak kelas baru.


<div class="revision">$Id: extension.use.txt 1392 2009-09-04 20:39:11Z qiang.xue $</div>