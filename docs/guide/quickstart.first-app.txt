Creating First Yii Application
==============================

To get an initial experience with Yii, we describe in this section how to
create our first Yii application. We will use the powerful `yiic` tool
which can be used to automate code creation for several purposes. We assume
that `YiiRoot` is the directory where Yii is installed.

Run `yiic` on the command line as follows:

~~~
YiiRoot/framework/yiic webapp WebRoot/testdrive
~~~

> Note: When running `yiic` on Mac OS, Linux or Unix, you may need to
change the permission of the `yiic` file so that it is executable. You may
also use `php YiiRoot/framework/yiic.php` to replace `yiic`.

This creates a skeleton Yii application under the directory
`WebRoot/testdrive`, where `WebRoot` stands for the document root of your
Web server. The application is a good starting point for adding more
features as it has all the needed directories and files.

Without writing a single line of code, we can test drive our first Yii
application by accessing the following URL in a Web browser:

~~~
http://hostname/testdrive/index.php
~~~

As we can see, the application has two pages: the homepage and the login
page. The homepage contains some nice information about the application as
well as the user login status, while the login page shows us how form input
and validation are done.

*screenshots of testdrive: homepage, homepage logged in, login page, login
with error page*

The following diagram shows the directory structure of our application.
Please see [Conventions](/doc/guide/basics.convention#dir) for detailed
explanation about this structure.

~~~
testdrive/
   index.php                 Web application entry script file
   assets/                   containing published resource files
   css/                      containing CSS files
   images/                   containing image files
   themes/                   containing application themes
   protected/                containg protected application files
      yiic                   yiic command line script
      yiic.bat               yiic command line script for Windows
      commands/              containing customized 'yiic' commands
         shell/              containing customized 'yiic shell' commands
      components/            containing reusable user components
         MainMenu.php        the 'MainMenu' widget class
         Identity.php        the 'Identity' class used for authentication
         views/              containing view files for widgets
            mainMenu.php     the view file for 'MainMenu' widget
      config/                containing configuration files
         console.php         the console application configuration
         main.php            the Web application configuration
      controllers/           containing controller class files
         SiteController.php  the default controller class
      extensions/            containing third-party extensions
      messages/              containing translated messages
      models/                containing model class files
         LoginForm.php       the form model for 'login' action
      runtime/               containing temporarily generated files
      views/                 containing controller view and layout files
         layouts/            containing layout view files
            main.php         the default layout for all views
         site/               containing view files for the 'site' controller
            index.php        the view for 'index' action
            login.php        the view for 'login' action
         system/             containing system view files
~~~

Connecting to Database
----------------------

Most Web applications are backed by databases. Our test-drive application
is not an exception. To use a database, we first need to tell the
application how to connect to it. This is done by changing the application
configuration file `WebRoot/testdrive/protected/config/main.php`, as shown
below:

~~~
[php]
return array(
	......
	'components'=>array(
		......
		'db'=>array(
			'connectionString'=>'sqlite:protected/data/source.db',
		),
	),
	......
);
~~~

In the above, we add a `db` entry to in `components`, which instructs the
application to connect to the SQLite database
`WebRoot/testdrive/protected/data/source.db` when needed.

> Note: To use Yii's database feature, we need to enable PHP PDO extension
and the driver-specific PDO extension. For the test-drive application, we
would need `php_pdo` and `php_pdo_sqlite` to be turned on.

To this end, we need to prepare a SQLite database so that the above
configuration can be effective. Using some SQLite admin tool, we can create
a database with the following schema:

~~~
[sql]
CREATE TABLE User (
	id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	username VARCHAR(128) NOT NULL,
	password VARCHAR(128) NOT NULL,
	email VARCHAR(128) NOT NULL
);
~~~

For simplicity, we only create a single `User` table in our database. The
SQLite database file is saved as
`WebRoot/testdrive/protected/data/source.db`. Both the file and the
containing directory must be made writable by the Web server process, as
required by SQLite.

Implementing CRUD Operations
----------------------------

Now is the fun part. We would like to implement the CRUD (create, read,
update and delete) operations for the `User` table we just created. This is
also commonly needed in practical applications.

Again, we use the `yiic` tool to help us generate the needed code. This
process is also known as *scaffolding*.

~~~
YiiRoot/framework/yiic shell WebRoot/testdrive/index.php
>> model User
...the above command creates a User model class based on the User table...
>> crud User
...the above command creates code needed by CRUD operations for User...
~~~

In the above, we use the `shell` command of `yiic` to interact with our
newly created application. At the prompt, we can enter a valid PHP
statement or expression to evaluate and print it. We can also perform tasks
such as `model` and `crud` as shown above. The `model` automatically
generates a `User` model class based on the schema of the `User` table. And
the `crud` command generates the controller class and views that implement
the CRUD operations for the `User` model.

> Note: If you make any change to your code or configuration, please
re-enter `yiic shell` so that the new code or configuration can take
effect. Also make sure you are using the right PHP CLI to execute `yiic`.
Otherwise you may encounter errors like "...could not find driver", even
though you are sure you have already enabled PDO and the corresponding
database driver. The reason for such kind of errors is often because the
wrong PHP CLI is using an unexpected `php.ini`.

Let's enjoy our work. Type in the following URL in the Web browser:

~~~
http://hostname/testdrive/index.php?r=user
~~~

This will display a list of user entries in the `User` table. Since our
table is empty, nothing will appear at the moment.

Click the `New User` link on the page. We will be brought to the login
page if we have not logged in before. After logging in, we are shown with
an input form that allows us to add a new user entry. Complete the form and
click on the `Create` button. If there is any input error, a nice error
prompt will be shown which prevents us from saving the input. Back to the
user list, we should see the newly added user appearing in the list.

*screenshots of empty user list, create user, create user with error, user list*

Repeat the above steps to add more users. Notice that user list page will
automatically paginate the user entries if there are too many to be
displayed in one page. The list page also allows us to sort, update or
delete user entries.

All these nice features come without requiring us to write a single line
of code!

<div class="revision">$Id$</div>