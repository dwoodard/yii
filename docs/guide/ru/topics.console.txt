Консольные приложения
=====================

Консольные приложения главным образом используются для выполнения вторичных или фоновых задач,
таких как генерация кода, компиляция поискового индекса, отправка сообщений электронной почты и т.д.
Yii предоставляет инструмент для разработки консольных приложений, придерживаясь
объектно-ориентированного подхода. Он позволяет консольному приложению получить доступ
к ресурсам, которые использует основное веб-приложение (например, к базе данных).


Обзор
-----
Каждая консольная задача представлена в Yii как [команда|CConsoleCommand].
Консольная команда описывается в классе, наследуемом от [CConsoleCommand].

Консольные команды управляются [консольным приложением|CConsoleApplication].
Консольное приложение похоже на веб-приложение: оно также может быть сконфигурировано
при помощи файла конфигурации и запускается при помощи входного скрипта.

Для запуска косольной команды следует использовать следующий формат:

~~~
php entryScript.php CommandName Param0 Param1 …
~~~

Входной скрипт
--------------

Как уже было упомянуто ранее, входной скрипт требуется для запуска консольной
команды. Если приложение создано при помощи инструмента `yiic webapp`,
то в нём уже есть консольное приложение с необходимым входным скриптом, находящимся
в `protected/yiic.php`.

Также можно написать свой входной скрипт:

~~~
[php]
defined('YII_DEBUG') or define('YII_DEBUG',true);

// подключаем файл инициализации Yii
require_once('path/to/yii/framework/yii.php');

// создаем и запускаем экземпляр приложения
$configFile='path/to/config/file.php';

Yii::createConsoleApplication($configFile)->run();
~~~

Консольная команда
------------------

Консольные команды находятся в файлах с классами в папке, указанной в
[CConsoleApplication::commandPath]. По умолчанию это `protected/commands`.

Класс консольной команды должен быть унаследован от [CConsoleCommand]. Имя класса
должно быть вида `XyzCommand`, где `Xyz` соответствует имени команды, первая буква
которого приведена к верхнему регистру. К примеру, команда `sitemap` должна использовать
класс `SitemapCommand`. По этой причине имена консольных команд регистрозависимы.

> Tip|Подсказка: Конфигурируя [CConsoleApplication::commandMap], можно при желании изменить порядок
именования и расположения классов команд.

В классе консольной команды можно либо описать несколько действий
(это будет описано в следующем подразделе) или перекрыть метод
[CConsoleCommand::run()]:

~~~
[php]
public function run($args) { ... }
~~~

где `$args` — дополнительные параметры, переданные из командной строки.


Действие консольной команды
---------------------------

> Note|Примечание: Данная возможность доступна начиная с версии 1.1.5.

В консольной команде часто требуется обрабатывать различные параметры. К примеру,
команда `sitemap` может принимать параметр, указывающий, какой тип карты сайта
необходимо сгенерировать. Мы можем разбить команду на несколько действий, каждое
из которых выполняет свою подзадачу, подобно действию [CController].

Действие консольной команды описывается в методе её класса. Имя метода должно быть
вида `actionXyz`, где `Xyz` соответствует имени действия и первой буквой, приведённой
к верхнему регистру. К примеру, метод `actionIndex` задаёт действие
с именем `index`.

Для того, чтобы запустить определённое действие, используется следующий формат команды:

~~~
php entryScript.php CommandName ActionName --Option1=Value1 --Option2=Value2 ...
~~~

Дополнительные пары имя-значение передаются методу действия как параметры.
Значение опции `xyz` соответствует параметру `$xyz` метода действия.
К примеру, если мы определим следующий класс команды:

~~~
[php]
class SitemapCommand extends CConsoleCommand
{
    public function actionIndex($type, $limit=5) { ... }
    public function actionInit() { ... }
}
~~~

То все следующие консольные команды вызовут `actionIndex('News', 5)`:

~~~
php entryScript.php sitemap index --type=News --limit=5

// $limit принимает значение по умолчанию
php entryScript.php sitemap index --type=News

// $limit принимает значение по умолчанию.
// Так как 'index' — действие по умолчанию, мы можем опустить имя действия.
php entryScript.php sitemap --type=News

// порядок опций не важен
php entryScript.php sitemap index --limit=5 --type=News
~~~

Если значение опции не указано (то есть `--type` вместо `--type=News`), соответствующему
параметру действия будет присвоено значение `true`.

> Note|Примечание: Алтернативные форматы указания опций, такие как
> `--type News` или `-t News` не поддерживаются.

Если объявить параметр как массив, он сможет принять массив значений:

~~~
[php]
public function actionIndex(array $types) { ... }
~~~

Чтобы передать массив значений необходимо указать одну и ту же опцию несколько раз:

~~~
php entryScript.php sitemap index --types=News --types=Article
~~~

Команда, приведённая выше, запустит `actionIndex(array('News', 'Article'))`.


Доступ к ресурсам
-----------------

Из консольной команды через метод `Yii::app()` можно обратиться к экземпляру приложения.
Консольное приложение также, как и веб-приложение, можно конфигурировать. Например, мы можем
настроить компонент приложения `db` для доступа к базе данных. Конфигурация, как правило, оформляется
в виде РНР-файла и передается конструктору класса консольного приложения
(или методу [createConsoleApplication|YiiBase::createConsoleApplication] во входном скрипте).


Использование утилиты `yiic`
---------------------

Мы использовали утилиту `yiic` для создания [первого Yii-приложения](/doc/guide/quickstart.first-app).
Эта утилита на самом деле является консольным приложение с входным скриптом `framework/yiic.php`.
Ее использование позволяет выполнить ряд задач: создание каркаса веб-приложения, генерация классов контроллеров и моделей,
генерация кода, необходимого для операций CRUD, получение списка сообщений, которые необходимо перевести и т.д.

Можно совершенствовать утилиту, добавляя собственные команды. Для этого вначале необходимо
создать каркас приложения с использованием команды `yiic webapp`, как описано в разделе [Создание первого Yii-приложения](/doc/guide/quickstart.first-app). Эта команда создаст два файла в папке `protected`:
`yiic` и `yiic.bat` — *локальные* копии утилиты `yiic`, сгенерированные специально для создаваемого веб-приложения.

Теперь мы можем создавать собственные команды в папке `protected/commands`. При запуске локальной версии утилиты мы
увидим, что к стандартному набору команд добавились созданные нами. Кроме того, можно создать команды, которые
будут доступны при использовании `yiic shell`. Для этого файлы классов команд нужно просто поместить в папку
`protected/commands/shell`.

Начиная с версии 1.1.1, можно создавать глобальные команды, общие для всех
приложений Yii, установленных на одном сервере. Для этого необходимо задать
переменную окружения `YII_CONSOLE_COMMANDS`, указывающую на существующую
директорию, которая будет хранить классы команд. Команды будут доступны везде,
где мы используем `yiic`.

<div class="revision">$Id: topics.console.txt 2580 2010-10-28 18:08:46Z qiang.xue $</div>