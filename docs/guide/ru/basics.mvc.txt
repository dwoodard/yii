Модель-Представление-Контроллер  (MVC)
======================================

Yii использует шаблон проектирования Модель-Представление-Контроллер (MVC, Model-View-Controller),
который широко применяется в веб-программировании.

MVC стремится разделить бизнес-логику от пользовательского интерфейса, чтобы разработчики могли легко изменять 
отдельные части приложения не затрагивая другие.
В архитектуре MVC модель предоставляет данные и правила бизнес-логики; представление отвечает за пользовательский
интерфейс (например, текст, поля ввода); контроллер обеспечивает взаимодействие между моделью и представлением.

Кроме того, Yii также предоставляет фронт-контроллер (front-controller), называемый приложением (application),
который выступает в роли контекста при исполнении запроса. Приложение (application) на основании пользовательского
запроса принимает решение о передаче управления соответствующему контроллеру для дальнейшей обработки запроса.

Следующая диаграмма отображает структуру приложения на Yii:

![Static structure of Yii application](structure.png)


Типичный пример выполнения
--------------------------
Следующая диаграмма описывает типичный процесс обработки пользовательского запроса приложением на Yii:

![A typical workflow of Yii application](flow.png)

   1. Пользователь совершает запрос по URL `http://www.example.com/index.php?r=post/show&id=1`
и веб-сервер обрабатывает его, запуская на исполнение начальный скрипт `index.php`.
   2. Скрипт создает экземпляр [приложения (application)](/doc/guide/basics.application) и запускает его на выполнение.
   3. Приложение получает детальную информацию о запросе пользователя от [компонента (application component)](/doc/guide/basics.application#application-component) под названием `request`.
   4. Приложение определяет соответствующие [контроллер (controller)](/doc/guide/basics.controller)
и  [экшн (action)](/doc/guide/basics.controller#action) при помощи компонента `urlManager`. 
В нашем примере контроллером будет `post`, относящийся к классу `PostController`, а экшном будет `show`, значение которого 
будет определено контроллером.
   5. Приложение создает экземпляр запрашиваемого контроллера для дальнейшей обработки запроса. Контроллер определяет, что 
экшну `show` соответствует метод `actionShow` в классе контроллера.  Затем оно создает и запускает фильтры (filters)
(такие как access control, benchmarking), связанные с данным экшном. Далее экшн выполяется, если это дозволено фильтрами.
   6. Экшн запрашивает [модель (model)](/doc/guide/basics.model) поста `Post` с ID равным `1` из базы данных.
   7. Экшн реднерит (renders) [представление (view)](/doc/guide/basics.view) с названием `show`, используя модель `Post`.
   8. Представление получает и отображает атрибуты модели `Post`.
   9. Представление выполняет некоторые [виджеты (widgets)](/doc/guide/basics.view#widget).
   10. Результаты рендеринга представления встраиваются в [разметку (layout)](/doc/guide/basics.view#layout).
   11. Экшн завершает рендеринг представления и выводит результат пользователю.


<div class="revision">$Id: basics.mvc.txt 419 2008-12-28 05:35:39Z qiang.xue $</div>