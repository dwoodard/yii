Темы оформления
===============

Темы оформления являются традиционным способом настроить внешний вид страниц веб-приложения. Применив новую тему, 
мы можем изменить внешний вид всего приложения за считанные секунды.

В Yii каждая тема представлена как папка, содержащая файлы представлений, макетов и прочих необходимых файлов, таких, 
как CSS, JavaScript и пр. Название папки соответственно определяет название темы. Все темы хранятся в папке 
`WebRoot/themes`, при этом быть активной, т.е. использоваться в текущий момент, может только одна из тем.

> Tip|Подсказка: Папку, где по умолчанию хранятся темы — `WebRoot/themes` — можно легко изменить путем
установки свойств [basePath|CThemeManager::basePath] и [baseUrl|CThemeManager::baseUrl] 
компонента [themeManager|CWebApplication::themeManager] на желаемые.

Для активации темы нужно установить значение [theme|CWebApplication::theme] равным имени соответствующей темы. 
Это можно проделать путем [конфигурации приложения](/doc/guide/basics.application#application-configuration) или 
прямо в ходе выполнения в действиях контроллера.

> Note|Примечание: Имя темы чувствительно к регистру, и, если попытаться активировать несуществующую тему, свойство 
 `Yii::app()->theme` вернет `null`.

Содержимое папки с темами должно быть организовано точно также, как и содержимое [базовой директории приложения](/doc/guide/basics.application#application-base-directory), то есть, все файлы представлений 
должны находитьс в папке `views`, макеты представлений в папке `views/layouts`, а файлы системных представлений 
в папке `views/system`. Например, если необходимо заменить представление `create` контроллера `PostController` на 
представление темы `classic`, нужно сохранить новый файл представления как `WebRoot/themes/classic/views/post/create.php`.

Для представлений контроллеров в [модулях](/doc/guide/basics.module), соответствующие файлы оформленных представлений нужно 
также поместить в папку `views`. Например, если упомянутый выше контроллер `PostController` входит в модуль `forum`, необходимо 
сохранить файл представления `create` как `WebRoot/themes/classic/views/forum/post/create.php`. Если модуль `forum` является 
составной частью другой модуля `support`, то файл представления должен быть сохранен как `WebRoot/themes/classic/views/support/forum/post/create.php`.

> Note|Примечание: Папка `views` может содержать данные чувствительные с точки зрения безопасности, поэтому необходимо 
ограничить доступ к папке извне сервера.

В момент вызова метода [render|CController::render] или [renderPartial|CController::renderPartial] для отображения 
представления происходит обращение к соответствующим файлам представлений и макетов активной темы. Если файлы найдены, начнется 
формирование странички, в противном случае, будут использоваться файлы оформления по умолчанию, месторасположение 
которых устанавливается свойствами [viewPath|CController::viewPath] и [layoutPath|CWebApplication::layoutPath].

> Tip|Подсказка: Часто в представлениях темы приходится ссылаться на прочие файлы темы, например, для отображения 
> картинки, находящейся в подпапке темы `images`. Используя свойство [baseUrl|CTheme::baseUrl] активной темы, можно 
> сформировать корректную ссылку на картинку следующим образом:
> ~~~
> [php]
> Yii::app()->theme->baseUrl . '/images/FileName.gif'
> ~~~

Ниже приведён пример организации директорий приложения с двумя темами `basic` и `fancy`:

~~~
WebRoot/
	assets
	protected/
		.htaccess
		components/
		controllers/
		models/
		views/
			layouts/
				main.php
			site/
				index.php
	themes/
		basic/
			views/
				.htaccess
				layouts/
					main.php
				site/
					index.php
		fancy/
			views/
				.htaccess
				layouts/
					main.php
				site/
					index.php
~~~

В настройках приложения, если мы будем использовать:

~~~
[php]
return array(
	'theme'=>'basic',
	…
);
~~~

то будет примяться тема `basic`. То есть главный макет (layout) будет браться из
`themes/basic/views/layouts`, а представление index — из `themes/basic/views/site`.
Если файл представления не найден в теме, будет использован файл из
`protected/views`.


Скины
-----

> Note|Примечание: Данная возможность доступна с версии 1.1.0.

В то время, как при использовании темы мы можем быстро менять вид
представлений, мы также можем использовать скины для настройки вида
[виджетов](/doc/guide/basics.view#widget), используемых в представлениях.

Скин — это массив пар имя-значение, который может использоваться для
инициализации свойств виджета. Скин принадлежит классу виджета, а класс виджета
может иметь несколько скинов, индентифицируемых по имени. Например, у нас может
быть скин `classic` для виджета [CLinkPager].

Для использования данной возможности нам, в первую очередь, необходимо изменить
настройки приложения установкой компонента `widgetFactory`:

~~~
[php]
return array(
    'components'=>array(
        'widgetFactory'=>array(
            'class'=>'CWidgetFactory',
        ),
    ),
);
~~~


Затем мы создаём необходимые скины. Скины, принадлежащие одному классу виджета,
хранятся в одном файле PHP, имя которого совпадает с названием класса виджета.
Все файлы скинов по умолчанию хранятся в директории `protected/views/skins`. Для
изменения директории надо настроить свойство `skinPath` компонента
`widgetFactory`. Например, мы можем создать в директории
`protected/views/skins` файл `CLinkPager.php`, код которого представлен ниже:

~~~
[php]
<?php
return array(
    'default'=>array(
        'nextPageLabel'=>'&gt;&gt;',
        'prevPageLabel'=>'&lt;&lt;',
    ),
    'classic'=>array(
        'header'=>'',
        'maxButtonCount'=>5,
    ),
);
~~~

В коде выше мы создаём для виджета [CLinkPager] два скина: `default` и
`classic`. Первый скин будет применяться к любому виджету [CLinkPager], в
котором явно не указано свойство `skin`, а второй — к виджету, свойство `skin`
которого имеет значение `classic`. Например, в следующем коде представления
первым виджет будет использовать скин `default`, а второй — скин `classic`:

~~~
[php]
<?php $this->widget('CLinkPager'); ?>

<?php $this->widget('CLinkPager', array('skin'=>'classic')); ?>
~~~

Если мы создаём виджет с набором первоначальных значений, они будут
иметь приоритет и будут объединены с любыми применяемыми скинами. Например,
следующий код представления создаст постраничную разбивку, чьи первоначальные значения —
это массив `array('header'=>'', 'maxButtonCount'=>6, 'cssFile'=>false)`,
который является результатом слияния первоначальных значений,
указанных в представлении, и скина `classic`.

~~~
[php]
<?php $this->widget('CLinkPager', array(
    'skin'=>'classic',
    'maxButtonCount'=>6,
    'cssFile'=>false,
)); ?>
~~~

Заметим, что скинизация НЕ требует использования темы. Однако, если тема
активна, Yii также будет искать скины в директории `skins` представлений темы
(например, `WebRoot/themes/classic/views/skins`). В случае, если скин с таким
же именем существует и в директории представления темы и в основной директории
представления приложения, скин темы будет иметь приоритет.

Если виджет использует несуществующий скин, Yii по-прежнему будет создавать виджет как обычно, без каких-либо ошибок.

> Info|Информация: Использование скина может привести к снижению производительности, поскольку Yii должен найти файл скина, когда виджет создается впервые.

<div class="revision">$Id: topics.theming.txt 1463 2009-10-17 01:49:02Z qiang.xue $</div>
