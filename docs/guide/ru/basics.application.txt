Приложение (Application)
========================


Приложение (application) представляет собой контекст выполнения запроса. Его 
основная задача - произвести предварительную обработку (resolve) запроса пользователя и передать его соответствующему
контроллеру для дальнейшей обработки. Оно также служит для хранения конфигурационных
параметров уровня приложения (application-level configuration). По этой причине приложение
также называют `фронт-контроллером (front-controller)`.

Приложение создается [входным скриптом (entry script)](/doc/guide/basics.entry) при помощи шаблона `одиночка (singleton)`.
Экземпляр приложения всегда доступен как [Yii::app()|YiiBase::app].


Конфигурация приложения
-----------------------

По умолчанию приложение - это экземпляр класса [CWebApplication]. Для его кастомизации обычно используется
конфигурационный файл  (или массив) чтобы установить требуемые значения свойств в момент создания экземпляра
приложения. Алтернативный путь кастомизации приложения - расширить класс [CWebApplication].

Конфигурация - это массив пар ключ-значение. Каждый ключ представляет собой имя свойства экземпляра приложения, а значение -
начальное значение соответствующего свойства. Например, следующая конфигурация устанавливает значение свойств
[name|CApplication::name] и [defaultController|CWebApplication::defaultController] для приложения.

~~~
[php]
array(
	'name'=>'Yii Framework',
	'defaultController'=>'site',
)
~~~

Обычно конфигурация хранится в отдельном PHP-скрипте (например, `protected/config/main.php`). Скрипт возвращает конфигурационный массив
так:

~~~
[php]
return array(...);
~~~

Чтобы задействовать конфигурацию, необходимо передать название конфигурационного файла как параметр конструктору приложения или классу [Yii::createWebApplication()], как показано ниже. Это обычно делается во [входном скрипте (entry script)](/doc/guide/basics.entry):

~~~
[php]
$app=Yii::createWebApplication($configFile);
~~~

> Tip: Если конфигурация очень громоздкая, можно разделить ее на несколько файлов, каждый из которых возвращает часть конфигурационного
массива. Затем, в основном конфигурационном файле, необходимо подключить эти файлы, используя `include()`, и слить массивы-части в единый 
конфигурационный массив.


Базовая (Base) директория приложения
------------------------------------

Базовая (base) директория приложения представляет собой корневую директорию, содержащую все 
важные (security-sensitive) PHP-скрипты и данные. По умолчанию - это поддиректория с названием `protected` в директории, которая содержит 
входной скрипт. Изменить это можно путем установки значения свойства [basePath|CWebApplication::basePath]  в [конфигурации приложения (application configuration)](#application-configuration).

Содержимое базовой директории приложения должно быть защищено от свободного доступа из веб. При использовании веб-сервера 
[Apache HTTP server](http://httpd.apache.org/), это можно сделать, разместив в базовой директории файл `.htaccess` следующего содержания:

~~~
deny from all
~~~

Компоненты приложения 
---------------------

Функциональность приложения может быть легко модифицирована и расширена по причине его компонентной архитектуры.
Приложение управляет набором компонентов, каждый из которых имеет специфические возможности.
Например, приложение производит предварительную обработку запроса пользователя, используя компоненты [CUrlManager] и [CHttpRequest].

Изменяя значение свойства [components|CApplication::components], можно настроить классы и значения свойств
любого компонента, используемого приложением. Например, можно сконфигурировать компонент [CMemCache] так, чтобы
он использовал несколько memcache-серверов для кэширования:

~~~
[php]
array(
	......
	'components'=>array(
		......
		'cache'=>array(
			'class'=>'CMemCache',
			'servers'=>array(
				array('host'=>'server1', 'port'=>11211, 'weight'=>60),
				array('host'=>'server2', 'port'=>11211, 'weight'=>40),
			),
		),
	),
)
~~~

В данном примере мы добавили элемент `cache` к массиву `components`. 
Элемент `cache` указывает, что классом компонента является `CMemCache`, а также устанавливает его свойство `servers`.

Для доступа к компоненту приложения используйте `Yii::app()->ComponentID`, где 
`ComponentID` - это идентификатор компонента (как например, `Yii::app()->cache`).

Компонент может быть деактивирован путем установки параметра `enabled` => false в его конфигурации. 
При обращении к деактивированному компоненту будет возвращен null.

> Tip: По умолчанию, компоненты приложения создаются по требованию. Это означает, что экземпляр компонента может
быть не создан вообще, в случае если это не требуется при обработке пользовательского запроса. Как результат - общая
производительность приложения не пострадает, даже если конфигурация приложения включает множество компонентов.
При необходимости обязательного создания экземпляров компонентов (например, [CLogRouter]) вне зависимости от того, используются они
или нет, укажите их идентификаторы в значении конфигурационного свойства [preload|CApplication::preload].

Ключевые компоненты приложения
------------------------------

Yii предопределяет набор ключевых компонентов, которые предоставляют возможности, необходимые для большинства веб-приложений.
Например, компонент [request|CWebApplication::request] ипользуется для предварительной обработки (resolve) запросов пользователя и предоставления
различной информации, такой как URL, куки (cookies). Конфигурируя свойства ключевых компонентов, можно изменять стандартное поведение
Yii практически как угодно.

Далее следует список ключевых компонентов, предопределенных классом [CWebApplication].

   - [assetManager|CWebApplication::assetManager]: [CAssetManager] -
управляет публикацией файлов ресурсов (asset files).

   - [authManager|CWebApplication::authManager]: [CAuthManager] - контролирует доступ на основе ролей (role-based access control, RBAC).

   - [cache|CApplication::cache]: [CCache] - предоставляет возможности кэширования данных. Учтите, что вы должны указать используемый класс (например, [CMemCache], [CDbCache]), иначе при доступе к компоненту будет возвращен null.

   - [clientScript|CWebApplication::clientScript]: [CClientScript] -
управляет клиентскими скриптами (javascripts и CSS).

   - [coreMessages|CApplication::coreMessages]: [CPhpMessageSource] -
предоставляет переводы ключевых сообщений фреймворка Yii.

   - [db|CApplication::db]: [CDbConnection] - обслуживает соединение с базой данных. Обратите внимание, что для использования компонента необходимо установить свойство [connectionString|CDbConnection::connectionString].

   - [errorHandler|CApplication::errorHandler]: [CErrorHandler] - обрабатывает непойманные ошибки и исключения PHP.

   - [messages|CApplication::messages]: [CPhpMessageSource] - предоставляет переводы сообщений, используемых в приложении.

   - [request|CWebApplication::request]: [CHttpRequest] - предоставляет информацию, относящуюся к пользовательскому запросу.

   - [securityManager|CApplication::securityManager]: [CSecurityManager] - предоставляет функции, связанные с безопасностью (такие как хэширование, шифрование).

   - [session|CWebApplication::session]: [CHttpSession] - обеспечивает функциональность, связанную с сессиями.

   - [statePersister|CApplication::statePersister]: [CStatePersister] -
предоставляет глобальную поддержку состояния (global state persistence method).

   - [urlManager|CWebApplication::urlManager]: [CUrlManager] - предоставляет функции парсинга и создания URL.

   - [user|CWebApplication::user]: [CWebUser] - предоставляет информацию об идентификации текущего пользователя.

   - [themeManager|CWebApplication::themeManager]: [CThemeManager] - управляет темами (themes).


Жизненный цикл приложения
-------------------------

Жизненный цикл приложения при обработке пользовательского запроса:

   1. Установка автозагрузчика (class autoloader) и обработчика ошибок;
   2. Регистрация ключевых компонентов приложения;
   3. Загрузка конфигурации приложения;
   4. Инициализация приложения [CApplication::init()]
	   - Загрузка статических компонентов приложения;
   5. Вызов события [onBeginRequest|CApplication::onBeginRequest];
   6. Обработка пользовательского запроса:
	   - Предварительная обработка (resolve) пользовательского запроса;
	   - Создание контроллера;
	   - Запуск контроллера на исполнение;
   7. Вызов события [onEndRequest|CApplication::onEndRequest];

<div class="revision">$Id: basics.application.txt 416 2008-12-28 05:28:11Z qiang.xue $</div>