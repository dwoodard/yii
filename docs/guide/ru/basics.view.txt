Представление (View)
====================

Представление - это PHP-скрипт, состоящий преимущественно из элементов пользовательского интерфейса.
Он может включать выражения PHP, однако рекомендуется, чтобы эти выражения не дополняли модели данных и оставались
относительно простыми. В духе разделения логики и представления, большая часть кода логики должна быть помещена в
контроллер или модель, а не в скрипт представления.

У представления есть имя, которое используется чтобы идентифицировать файл скрипта представления при рендеринге.
Имя представления совпадает с названием его файла скрипта. К примеру, для представления `edit` соответствующий файл
скрипта должен называться `edit.php`. Чтобы произвести рендеринг представления необходимо вызвать [CController::render()],
указав имя представления. При этом метод попытается обнаружить соответствующий файл скрипта представления в директории 
`protected/views/ControllerID`.

Внутри скрипта представления экземпляр контроллера доступен через `$this`. 
Таким образом, обратиться к свойству контроллера из кода представления можно так: `$this->propertyName`.

Следующий подход может быть использован для передачи данных представлению:

~~~
[php]
$this->render('edit', array(
	'var1'=>$value1,
	'var2'=>$value2,
));
~~~

В приведенном коде метод [render()|CController::render] извлечет второй параметр-массив в переменные. Как результат, в коде
скрипта представления можно обращаться к локальным переменным `$var1` and `$var2`.

Разметка (Layout)
-----------------

Разметка - это специальное представление для декорирования других представлений.
Разметка обычно содержит части пользовательского интерфейса, часто используемые другими представлениями.
Например, разметка может содержать хедер и футер, включая между ними содержание другого представления.

~~~
[php]
......header here......
<?php echo $content; ?>
......footer here......
~~~

Здесь `$content` хранит результаты рендеринга представления основного содержания.

Разметка применяется наявно при вызове [render()|CController::render].
По умолчанию скрипт представления `protected/views/layouts/main.php` используется в качестве разметки.
Это можно изменить путем установки значений [CWebApplication::layout] или [CController::layout]. 
Для рендеринга представления без применения разметки необходимо вызвать [renderPartial()|CController::renderPartial].

Виджет (Widget)
---------------

Виджет - это экземпляр класса [CWidget] или производного от него. Это компонент, применяемый в основном с целью представления.
Виджеты обычно встраивают в скрипт представления для генерации некоторой комплексной самодостаточной части пользовательского 
интерфейса. К примеру, виджет календаря может быть использован для рендеринга комплексного интерфейса календаря. Виджеты
служат цели повторного использования кода пользовательского интерфейса.

Примеры использования виджетов:

~~~
[php]
<?php $this->beginWidget('path.to.WidgetClass'); ?>
...body content that may be captured by the widget...
<?php $this->endWidget(); ?>
~~~

или

~~~
[php]
<?php $this->widget('path.to.WidgetClass'); ?>
~~~

Последний пример показывает использование виджета, которому не требуется никакое внутренее содержание.

Виджеты можно конфигурировать чтобы изменить их поведение. Это делается путем установки значений свойств при вызове
[CBaseController::beginWidget] или [CBaseController::widget]. Например, при использовании виджета [CMaskedTextField] 
можно указать используемую маску, передав массив значений свойств как показано ниже, где ключи массива являются названиями свойств,
а значения - требуемыми начальными значениями соответствующих свойств виджета:

~~~
[php]
<?php
$this->widget('CMaskedTextField',array(
	'mask'=>'99/99/9999'
));
?>
~~~

Чтобы создать новый виджет необходимо расширить класс [CWidget] и перегрузить его методы [init()|CWidget::init] и [run()|CWidget::run]:

~~~
[php]
class MyWidget extends CWidget
{
	public function init()
	{
		// этот метод будет вызван методом CController::beginWidget()
	}

	public function run()
	{
		// этот метод будет вызван методом CController::endWidget()
	}
}
~~~

Как и контроллер, у виджета может быть собственное представление. По умолчанию, файлы представлений виджета находятся в поддиректории
`views` директории, содержащей файл класса виджета. Эти представления можно рендерить при помощи вызова [CWidget::render()], похоже на то, 
как єто делается для контроллера. Единственная разница в том, что разметка не будет задействована для представления виджета.

Системные представления (System View)
-------------------------------------

Системные представления относятся к представлениям, используемым Yii для отображения ошибок и информации лога.
Например, когда пользователь запрашивает несуществующий контроллер или экшн, Yii сгенерирует исключение, обясняющее суть ошибки.
Такое исключение будет отображено с помощью системного представления.

Именование системых представлений подчиняется некоторым правилам. Имена типа `errorXXX` относятся к представлениям, служащим для
отображения [CHttpException] с кодом ошибки `XXX`. Например, если исключение [CHttpException] сгенерировано с кодом ошибки 404, 
будет использовано представление `error404`.

Yii предоставляет стандартный набор системных представлений, расположенных в `framework/views`. Они могут быть кастомизированы путом создания
файлов представлений с такими же названиям в директории `protected/views/system`.

<div class="revision">$Id: basics.view.txt 416 2008-12-28 05:28:11Z qiang.xue $</div>