Кэширование данных
============

Кэширование данных - это хранение некоторой переменной PHP в кэше и получение
ее позже из кэша. Для этой цели базовый класс [CCache] компонента кэша
имеет два наиболее используемых метода: [set()|CCache::set]
и [get()|CCache::get].

Для кэширования переменной `$value` мы выбираем уникальный идентификатор (ID)
и вызываем метод [set()|CCache::set] для сохранения этой переменной в кэше:

~~~
[php]
Yii::app()->cache->set($id, $value);
~~~

Кэшированные данные будут оставаться в кэше всегда, пока не будут удалены
из-за некоторых условий кэша (например, место для кэширования не осталось,
тогда более старые данные удаляются). Для изменения такого поведения мы можем
также установить значения срока действия кэша при вызове метода
[set()|CCache::set], тогда данные будут удалены из кэша после определенного
периода времени:

~~~
[php]
// сохраняем значение переменной в кэше не более 30 секунд
Yii::app()->cache->set($id, $value, 30);
~~~

Позже, когда нам понадобится доступ к этой переменной (в этом же или другом
веб-запросе), мы вызываем метод [get()|CCache::get] с идентификатора (ID) для
получения переменной из кэша. Если возвращенное значение - false, то переменная
не доступна в кэше и мы должны регенерировать ее (обновить в кэше).

~~~
[php]
$value=Yii::app()->cache->get($id);
if($value===false)
{
	// обновляем $value, т.к. переменная не найдена в кэше,
	// и сохраняем в кэш для дальнейшего использования:
	// Yii::app()->cache->set($id,$value);
}
~~~

При выборе идентификатора (ID) для кэшируемой переменной, учитывайте, что он
(ID) должен быть уникальным для каждой переменной из тех, что могут быть
кэшированы в приложении. НЕ требуется, чтобы идентификатор (ID) был уникальным
между разными приложениями, потому что компонент кэша достаточно умен для
дифференциации (различения) идентификаторов (ID) разных приложений.

Для удаления кэшированного значения из кэша надо вызвать метод
[delete()|CCache::delete], а для очистки всего кэша - вызвать метод
[flush()|CCache::flush]. Надо быть осторожным при вызове метода
[flush()|CCache::flush], т.к. он также удаляет кэшированные данные
других приложений.

> Tip|Подсказка: класс [CCache] реализует `ArrayAccess` (интерфейс?), поэтому
> компонент кэша может использоваться как массив. Ниже приведены примеры:
> ~~~
> [php]
> $cache=Yii::app()->cache;
> $cache['var1']=$value1;  // эквивалентно для: $cache->set('var1',$value1);
> $value2=$cache['var2'];  // эквивалентно для: $value2=$cache->get('var2');
> ~~~

Зависимость кэша
----------------

Помимо установки срока действия, кэшируемые данные также могут стать
недействительными в соответствии с некоторыми изменениями зависимости.
Например, если мы кэшируем содержимое некоторого файла, и файл изменился,
мы должны сделать кэшированную копию недействительной и считать свежее
содержимое из файла вместо кэшированного.

Мы представляем зависимость как экземпляр класса [CCacheDependency] или
классов, его наследующих. Мы передаем экземпляр зависимости вместе с
кэшируемыми данными, когда вызываем метод [set()|CCache::set].

~~~
[php]
// значение действительно не более 30 секунд
// также, может стать недействительным раньше, если зависимый файл изменен
Yii::app()->cache->set($id, $value, 30, new CFileCacheDependency('FileName'));
~~~

Теперь, если мы попытаемся получить значение `$value` из кэша, вызвав метод
[get()|CCache::get], зависимость оценится и, если она изменилась, мы получим
значение false, показывающее, что данные требуют обновления.

Ниже приведен список доступных зависимостей кэша:

   - [CFileCacheDependency]: зависимость меняется, если время модификации файла
   изменено.

   - [CDirectoryCacheDependency]: зависимость меняется, если любой файл в
   каталоге или в подкаталогах изменен.

   - [CDbCacheDependency]: зависимость меняется, если результат запроса
   некоторого определенного SQL выражения изменен.

   - [CGlobalStateCacheDependency]: зависимость меняется, если значение
   определенного глобального состояния изменено. Глобальное состояние - 
   это переменная, являющаяся постоянной в многократных запросах и сессиях
   приложения. Устанавливается методом [CApplication::setGlobalState()].

   - [CChainedCacheDependency]: зависимость меняется, если любая зависимость
   цепочки изменена.

   
(прим. перев. - термин "зависимость" немного непонятен и сбивает с толку;
варианты рассматриваются)
<div class="revision">$Id: caching.data.txt 169 2008-11-06 19:43:44Z qiang.xue $</div>