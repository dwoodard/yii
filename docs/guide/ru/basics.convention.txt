Соглашения
==========

Yii ставит соглашения выше конфигураций. Следуя соглашениям, вы сможете создавать серъезные Yii-приложения
без необходимости написания и поддержи сложных конфигураций. Конечно же, при необходимости Yii может
быть кастомизирован с помощью конфигураций практически как угодно.

Ниже представлены соглашения, рекомендуемые для программирования под Yii.
Для удобства примем, что `WebRoot` - это директория, в которую установлено Yii-приложение.

URL
---

По умолчанию Yii понимает URL-ы следующего формата:

~~~
http://hostname/index.php?r=ControllerID/ActionID
~~~

GET-переменная `r` представляет путь, из которого Yii извлекает информацию о контроллере и экшне.
Если `ActionID` не указан, контроллер будет использовать экшн по умолчанию (заданный в [CController::defaultAction]).
Если `ControllerID` также не указан (либо переменная `r` отсутствует), будет использован
контроллер по умолчанию (заданный в [CWebApplication::defaultController]).

Используя [CUrlManager] возможно создавать и применять более SEO-дружественные URL-ы, такие как 
`http://hostname/ControllerID/ActionID.html`. Эта возможность детально описана в [URL Management](/doc/guide/topics.url).

Код
---

Yii рекомендует именовать переменные, функции и классы, используя camel case, что подразумевает написание
каждого слова в имени с большой буквы и соединение их без пробелов.
Первое слово в имени переменных и функций должно быть написано в нижнем регистре, чтобы отличать их от имен
классов (например, `$basePath`, `runController()`, `LinkPager`). Для имен приватных членов класса рекомендуется
использовать знак подчеркивания как префикс (например, `$_actionList`).

Так как пространства имен не поддерживаются версиями PHP до 5.3.0, рекомендуется, чтобы имена классов были 
уникальными во избежание конфликта имен с классами сторонних производителей. По этой причине все имена классов
фреймворка Yii имеют префикс "C".

Специальное правило для имен классов контроллеров - они должны быть дополнены словом `Controller`. 
При этом идетификатором контроллера будет имя класса с первой буквой в нижнем регистре и без слова `Controller`.
Например, для класса `PageController` идентификатором будет `page`. Данное правило делает приложение более защищенным.
Оно также делает URL более понятным (к примеру, `/index.php?r=page/index` вместо `/index.php?r=PageController/index`).

Конфигурация
------------

Конфигурация - это масиив пар ключ-значение. Каждый ключ представляет собой имя свойства конфигурируемого объекта,
а значение - начальное значение соответствующего свойства. К примеру, `array('name'=>'Myapplication', 
'basePath'=>'./protected')` инициализирует свойства `name` и `basePath` соответствующими значениями.

Любые свойства объекта, которые доступны для записи, могут быть сконфигурированы.
Если некоторые свойства не сконфигурированы, для них будут использованы значения по умолчанию. При конфигурировании свойств
рекомендуется изучить соответствующий раздел документации, чтобы избежать задания некорректных значений.

Файл
----

Соглашения для именования и использования файлов зависят от их типов.

Файлы классов должны быть названы так же, как и общие классы, содержащиеся в них.
Например, класс [CController] находится в файле `CController.php`. Общий класс - это класс, который
может быть использован любыми другими классами. Каждый файл классов должен содержать как минимум один общий класс.
Приватные классы (классы, которые могут быть использованы только одним общим классом) должны находится в одном
файле с общим классом.

Файлы представлений должны иметь такие же имена, как и содержащиеся в них представления. К примеру, представление `index`
находится в файле `index.php`. Файл представления - это PHP-скрипт, содержащий HTML и PHP-код в основном для задач отображения 
пользовательского интерфейса.

Конфигурационные файлы могут именоваться произвольно. Файл конфигурации - это PHP-скрипт, чье единственное назначение - возвращать
ассоциативный массив, представляющий конфигурацию.

Директория
----------

В Yii предопределен набор директорий для различных целей. Каждая из них может быть кастомизирована при необходимости.

   - `WebRoot/protected`: это [базовая директория приложения](/doc/guide/basics.application#application-base-directory) 
содержащая все наиболее важные PHP-скрипты и файлы данных. Псевдоним по умолчанию для этого пути - `application`.
Эта директория и ее содержимое должно быть защищено от прямого доступа из Веб. Директория может быть кастомизирована через 
[CWebApplication::basePath].

   - `WebRoot/protected/runtime`: эта директория содержит приватные временные файлы, сгенерированные во время выполнения приложения.
Эта директория должна быть доступна для записи веб-серверу. Она может быть кастомизирована через [CApplication::runtimePath].

   - `WebRoot/protected/extensions`: эта директория содержит все сторонние расширения. Она может быть кастомизирована через 
[CApplication::extensionPath].

   - `WebRoot/protected/controllers`: эта директория содержит файлы всех классов контроллеров. Она может быть кастомизирована через 
[CWebApplication::controllerPath].

   - `WebRoot/protected/views`: эта директория содержит файлы всех представлений, включая представления контроллеров, разметку и системные
представления. Она может быть кастомизирована через [CWebApplication::viewPath].

   - `WebRoot/protected/views/ControllerID`: эта директория содержит файлы представлений для отдельного класса контроллера. Здесь `ControllerID` -
идентификатор контроллера. Директория может быть кастомизирована через [CController::getViewPath].

   - `WebRoot/protected/views/layouts`: эта директория содержит файлы разметки. Она может быть кастомизирована через 
[CWebApplication::layoutPath].

   - `WebRoot/protected/views/system`: эта директория содержит файлы системных представлений (используются для отображения сообщений об
ошибках и исключений). Она может быть кастомизирована через [CWebApplication::systemViewPath].

   - `WebRoot/assets`: эта директория содержит файлы ресурсов (приватные файлы, которые могут быть опубликованы для доступа из Веб). 
Директория должна быть доступна для записи веб-серверу. Она может быть кастомизирована через [CAssetManager::basePath].

   - `WebRoot/themes`: эта директория содержит различные темы оформления, которые доступны приложению. Каждая поддиректория содержит
отдельную тему с именем, совпадающим с названием поддиректории. Директория может быть кастомизирована через [CThemeManager::basePath].

<div class="revision">$Id: basics.convention.txt 170 2008-11-06 20:33:35Z qiang.xue $</div>