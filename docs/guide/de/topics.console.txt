Konsolenanwendungen
===================

Konsolenanwendungen werden bei einer Webanwendung hauptsächlich für
Offline-Arbeiten verwendet, wie z.B. zur Codegenerierung, zum Erstellen eines
Suchindexes, zum Verschicken von E-Mails etc. Auch hierfür bietet Yii ein 
Framework, um solche Anwendungen systematisch und objektorientiert zu erstellen.

Jeder Konsolenbefehl wird in Yii durch ein [Kommando|CConsoleCommand]
repräsentiert. Eine [Konsolenanwendung|CConsoleApplication] wiederum
kümmert sich darum, einen Aufruf von der Kommandozeile an das entsprechende 
Kommando weiterzuleiten. Diese Anwendung wird in einem eigenen Startscript 
erstellt. Um einen Konsolenbefehl aufzurufen, führt man an
der Kommandozeile also z.B. folgenden Befehl aus:

~~~
php eingangsScript.php KommandoName Param0 Param1 ...
~~~

`KommandoName` bezieht sich hier auf den Namen des Kommandos wobei
Groß-/Kleinschreibung nicht berücksichtigt wird.  `Param0`, `Param1` usw.
sind Parameter, die an die Kommandoinstanz übergeben werden.

Das Startscript kann ähnlich wie das einer Webanwendung aussehen:

~~~
[php]
defined('YII_DEBUG') or define('YII_DEBUG',true);
// Einbinden der Yii-Startdatei
require_once('pfad/zum/yii/framework/yii.php');
// Erstellen und Starten der Applikation
$configFile='pfad/zur/config/datei.php';
Yii::createConsoleApplication($configFile)->run();
~~~

Nun kann man von [CConsoleCommand] abgeleitetete Kommandoklassen
erstellen. Jede Kommandoklasse sollte wie das entsprechende Kommando heißen,
ergänzt um `Command`. So würde z.B. eine Klasse `EmailCommand` ein Kommando 
`email` zu definieren. Alle Kommandoklassen sollten
in einem  Unterverzeichnis `commands` im
[Anwendungsverzeichnis](/doc/guide/basics.application#application-base-directory)
abgelegt werden.

> Tip|Tipp: Verwendet man [CConsoleApplication::commandMap], können
Kommandoklassen auch anderen Namenskonventionen folgen und an anderen Orten
liegen.

Am wichtigsten bei einer eigenen Kommandoklasse ist die Methode
[CConsoleCommand::run]. Sie wird beim Ausführen des Kommandos
Bmit den Kommandozeilenparametern als Array aufgerufen. Hier ein Beispiel:

~~~
[php]
class EmailCommand extends CConsoleCommand
{
	public function run($args)
	{
		$receiver=$args[0];
		// Email an $receiver senden
	}
}
~~~

Auch in einer Konsolenanwendung kann man jederzeit über `Yii::app()` auf die 
Anwendung zugreifen. Und auch die Konfiguration erfolgt analog zu einer
Webanwendung. Für Datenbankzugriffe kann man zum Beispiel eine Komponente
`db` konfigurieren. In der Regel liegt die Konfiguration als PHP-Datei vor.
Der Pfad dazu wird im Konstruktor an die Anwendung übergeben (bzw. im Startscript an
[createConsoleApplication|YiiBase::createConsoleApplication]).


Verwendung des `yiic`-Befehls
-----------------------------

Wir haben den `yiic`-Befehl bereits verwendet, um die [erste Yii-Anwendung
zu erstellen](/doc/guide/quickstart.first-app). Der `yiic`-Befehl 
ist tatsächlich auch nur eine Konsolenanwendung mit dem Startscript 
`framework/yiic.php`. Mit `yiic` kann man das Grundgerüst einer Webanwendung 
anlegen, Controller- und Modelklassen erstellen, Code für CRUD-Operationen 
erzeugen, zu übersetzende Textmeldungen extrahieren etc. 

Man kann `yiic` um eigene Kommandos ergänzen. Dazu sollte zunächst
eine Webanwendung erstellt werden, wie im Kapitel [Erstellen der
ersten Yii-Anwendung](/doc/guide/quickstart.first-app) beschrieben. Der Befehl
`yiic webapp` erzeugt zwei Dateien im `protected`-Verzeichnis mit: `yiic` und
`yiic.bat`. Das sind *lokale* Versionen des `yiic`-Befehls, die speziell für
diese Webanwendung erstellt wurden.

Eigene Kommandos kann man in `protected/commands` ablegen. Ruft man dann
`yiic` auf, werden die eigenen Kommandos zusätzlich zu den Standardbefehlen
angezeigt. Man kann auch spezielle Kommandos für `yiic shell` erstellen.
Die Kommandklasse muss dazu ins Verzeichnis `protected/commands/shell` gelegt werden.

Seit Version 1.1.1 kann man auch globale Kommandos erstellen, die dann von
allen Yii-Anwendungen auf einem Server verwendet werden können. Dazu muss die
Umgebungsvariable `YII_CONSOLE_COMMANDS` definiert werden, die auf ein
existierendes Verzeichnis zeigt. Sämtliche Kommandos in diesem Verzeichnis
stehen dann bei jedem Aufruf von `yiic` zur Verfügung.

<div class="revision">$Id: topics.console.txt 1870 2010-03-09 22:23:19Z qiang.xue $</div>
