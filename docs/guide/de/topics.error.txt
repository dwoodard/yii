Fehlerbehandlung
================

Yii bietet ein vollständiges Framework zur Fehlerbehandlung, das auf dem
Exception-Mechanismus von PHP 5 basiert. Wenn eine Applikation erzeugt wird,
um einen eingehenden Benutzer-Request zu bearbeiten, registriert sie ihre
[handleError|CApplication::handleError]-Methode (sinngem.: behandle Fehler), 
um PHPs Warnungen und Hinweise zu verarbeiten. Außerdem registriert sie ihre
[handleException|CApplication::handleException]-Methode (sinngem.: behandle
Ausnahme), um nicht-abgefangene PHP-Exceptions zu bearbeiten. Wenn daher 
während der Ausführung der Anwendung 
eine PHP-Warnung, ein PHP-Hinweis oder eine nicht-abgefangene Exception
auftritt, wird eine dieser Fehlerroutinen die Kontrolle übernehmen und die
nötige Prozedur zur Bearbeitung des Fehlers einleiten.


> Tip|Tipp: Die Fehlerroutinen werden im Konstruktor der Anwendung durch
Aufruf der PHP-Funktionen 
[set_exception_handler](http://www.php.net/manual/de/function.set-exception-handler.php)
und [set_error_handler](http://www.php.net/manual/de/function.set-error-handler.php)
registriert. Wenn Sie nicht möchten, dass Yii sich um Fehler und Exceptions
kümmert, können Sie im [Eingangsscript](/doc/guide/basics.entry) die Konstanten 
`YII_ENABLE_ERROR_HANDLER` und `YII_ENABLE_EXCEPTION_HANDLER` als false definieren.

Per Vorgabe löst [errorHandler|CApplication::errorHandler] (bzw.
[exceptionHandler|CApplication::exceptionHandler]) ein
[onError|CApplication::onError]-Event (bzw.
[onException|CApplication::onException]-Event) aus. Falls der Fehler (bzw. die
Exception) von keinem Eventhandler behandelt wird, ruft die Routine die
[errorHandler|CErrorHandler]-Anwendungskomponente zu Hilfe.

Auslösen von Exceptions
-----------------------

Das Auslösen einer Exception (Ausnahme) in Yii unterscheidet sich nicht vom
Auslösen einer normalen PHP-Exception. Exceptions werden bei Bedarf mit
folgender Syntax ausgelöst:

~~~
[php]
throw new ExceptionClass('ExceptionNachricht');
~~~

Yii definiert zwei Exceptionklassen: [CException] und [CHttpException].
Erstere ist eine allgemeine Exceptionklasse, während letztere eine Exception
darstellt, die dem Endanwender angezeigt werden soll. Sie hat auch
eine [statusCode|CHttpException::statusCode]-Eigenschaft, die für den
HTTP-Statuscode steht. Wie wir gleich sehen werden, bestimmt die Klasse 
einer Exception darüber, wie diese angezeigt werden soll.

> Tip|Tipp: Durch das Auslösen einer [CHttpException]-Exception kann man sehr
einfach auf Fehlfunktionen aufmerksam machen. Falls ein Benutzer z.B. eine
falsche Beitrags-ID übergibt, können wir die folgende Anweisung verwenden um
einen 404-Fehler (Seite nicht gefunden) auszugeben:
~~~
[php]
// Falls Beitrags-ID ungültig ist:
throw new CHttpException(404,'Der angegebene Beitrag wurde nicht gefunden.');
~~~

Anzeigen von Fehlern
--------------------

Wenn ein Fehler an die Anwendungskomponente [CErrorHandler] weitergeleitet
wird, sucht diese nach dem passenden View, um den Fehler anzuzeigen. Falls der
Fehler zur Anzeige für den Endanwender gedacht ist (wie z.B.
[CHttpException]), verwendet sie einen View namens `errorXXX`, wobei `XXX` für
den HTTP-Statuscode steht (z.B. 400, 404, 500). Falls es sich um einen
internen Fehler handelt und dieser nur Entwicklern angezeigt werden soll,
verwendet sie einen View namens `exception`. In letzterem Fall wird der
vollständige Aufrufstack (engl.: call stack) sowie Informationen zur Zeile, 
in der der Fehler aufgetreten ist, angezeigt. 

> Info: Falls die Anwendung im
[Produktivmodus](/doc/guide/basics.entry#debug-mode) läuft, werden alle
(inkl. interne) Fehler mit dem View `errorXXX` angezeigt, da
der Aufrufstack evtl. sensible Daten enthalten kann. In diesem Fall sollte der
Entwickler Fehlerprotokolle verwenden, um die wahre Ursache des Fehlers
herauszufinden.

[CErrorHandler] sucht in dieser Reihenfolge nach der entsprechenden 
View-Datei:

   1. `WebRoot/themes/MotivName/views/system`: dies ist das Verzeichnis für
`system`-Views im gerade aktiven Motiv (engl: theme).

   2. `WebRoot/protected/views/system`: dies ist das Standardverzeichnis
für `system`-Views einer Anwendung.

   3. `yii/framework/views`: dies ist das Standardverzeichnis für
`system`-Views, die das Yii-Framework bereitstellt.

Wenn wir also die Darstellung der Fehler anpassen möchten, können wir einfach
im system-View-Verzeichnis unserer Anwendung oder unseres
Motivs View-Dateien anlegen. Jede View-Datei ist ein gewöhnliches PHP-Script, das
hauptsächlich aus HTML-Code besteht. Mehr Details finden sie in den
vorgegebenen View-Dateien im `view`-Verzeichnis des Frameworks.

Loggen von Nachrichten
----------------------

Immer wenn ein Fehler auftritt, wird eine Nachricht mit der Stufe `error`
geloggt. Falls der Fehler von einer PHP-Warnung oder einem PHP-Hinweis stammt,
wird die Nachricht mit der Kategorie `php` geloggt. Stammt der Fehler von
einer nicht-abgefangenen Exception, lautet die Kategorie
`exception.ExceptionKlassenName` (bei [CHttpException] wird auch deren
[statusCode|CHttpException::statusCode] an die Kategorie angehängt). Man kann
somit die Verfahren zur [Protokollierung](/doc/guide/topics.logging) benutzen,
um Ausführungsfehler einer Anwendung zu überwachen.

<div class="revision">$Id: topics.error.txt 170 2008-11-06 20:33:35Z qiang.xue $</div>
